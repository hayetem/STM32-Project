
tp1os2311.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006724  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080068b4  080068b4  000078b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068ec  080068ec  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  080068ec  080068ec  000078ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068f4  080068f4  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068f4  080068f4  000078f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068f8  080068f8  000078f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080068fc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008010  2**0
                  CONTENTS
 10 .bss          000043f4  20000010  20000010  00008010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004404  20004404  00008010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174ec  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003968  00000000  00000000  0001f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00022e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f7d  00000000  00000000  000242d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b83  00000000  00000000  0002524d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c3b  00000000  00000000  00048dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da780  00000000  00000000  00060a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013b18b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054bc  00000000  00000000  0013b1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0014068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800689c 	.word	0x0800689c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800689c 	.word	0x0800689c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000080 	.word	0x20000080

080004f4 <Led_GateKeeper2>:

}

}*/
void Led_GateKeeper2(void *pvParameters)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    TickType_t xShortDelay = 100 / portTICK_PERIOD_MS; // 100ms delay
 80004fc:	2364      	movs	r3, #100	@ 0x64
 80004fe:	613b      	str	r3, [r7, #16]
    TickType_t xLongDelay = 1000 / portTICK_PERIOD_MS; // 1000ms delay
 8000500:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000504:	60fb      	str	r3, [r7, #12]

    for(;;)
    {
        // Prendre le mutex
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 8000506:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <Led_GateKeeper2+0x74>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f04f 31ff 	mov.w	r1, #4294967295
 800050e:	4618      	mov	r0, r3
 8000510:	f004 fa98 	bl	8004a44 <xQueueSemaphoreTake>
 8000514:	4603      	mov	r3, r0
 8000516:	2b01      	cmp	r3, #1
 8000518:	d121      	bne.n	800055e <Led_GateKeeper2+0x6a>
        {
            for(int i = 0; i < 3; i++) // Blink 3 times
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e014      	b.n	800054a <Led_GateKeeper2+0x56>
            {
                HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET); // Turn LED on
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000526:	4811      	ldr	r0, [pc, #68]	@ (800056c <Led_GateKeeper2+0x78>)
 8000528:	f000 fdc6 	bl	80010b8 <HAL_GPIO_WritePin>
                vTaskDelay(xShortDelay);
 800052c:	6938      	ldr	r0, [r7, #16]
 800052e:	f004 fe33 	bl	8005198 <vTaskDelay>
                HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET); // Turn LED off
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000538:	480c      	ldr	r0, [pc, #48]	@ (800056c <Led_GateKeeper2+0x78>)
 800053a:	f000 fdbd 	bl	80010b8 <HAL_GPIO_WritePin>
                vTaskDelay(xShortDelay);
 800053e:	6938      	ldr	r0, [r7, #16]
 8000540:	f004 fe2a 	bl	8005198 <vTaskDelay>
            for(int i = 0; i < 3; i++) // Blink 3 times
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	3301      	adds	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	2b02      	cmp	r3, #2
 800054e:	dde7      	ble.n	8000520 <Led_GateKeeper2+0x2c>
            }

            // Libérer le mutex
            xSemaphoreGive(xMutex);
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <Led_GateKeeper2+0x74>)
 8000552:	6818      	ldr	r0, [r3, #0]
 8000554:	2300      	movs	r3, #0
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	f004 f8d3 	bl	8004704 <xQueueGenericSend>
        }

        vTaskDelay(xLongDelay); // Wait for 1000ms
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	f004 fe1a 	bl	8005198 <vTaskDelay>
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 8000564:	e7cf      	b.n	8000506 <Led_GateKeeper2+0x12>
 8000566:	bf00      	nop
 8000568:	20000280 	.word	0x20000280
 800056c:	40020c00 	.word	0x40020c00

08000570 <Led_GateKeeper4>:
    }
}

void Led_GateKeeper4(void *pvParameters)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    TickType_t xDelay = 500 / portTICK_PERIOD_MS; // 500ms delay
 8000578:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800057c:	60fb      	str	r3, [r7, #12]

    for(;;)
    {
        // Prendre le mutex
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <Led_GateKeeper4+0x48>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f04f 31ff 	mov.w	r1, #4294967295
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fa5c 	bl	8004a44 <xQueueSemaphoreTake>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	d10e      	bne.n	80005b0 <Led_GateKeeper4+0x40>
        {
            // Toggle LED4
            HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8000592:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000596:	4809      	ldr	r0, [pc, #36]	@ (80005bc <Led_GateKeeper4+0x4c>)
 8000598:	f000 fda7 	bl	80010ea <HAL_GPIO_TogglePin>
            vTaskDelay(xDelay);
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f004 fdfb 	bl	8005198 <vTaskDelay>

            // Libérer le mutex
            xSemaphoreGive(xMutex);
 80005a2:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <Led_GateKeeper4+0x48>)
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2200      	movs	r2, #0
 80005aa:	2100      	movs	r1, #0
 80005ac:	f004 f8aa 	bl	8004704 <xQueueGenericSend>
        }

        vTaskDelay(xDelay); // Wait for 500ms
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f004 fdf1 	bl	8005198 <vTaskDelay>
        if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 80005b6:	e7e2      	b.n	800057e <Led_GateKeeper4+0xe>
 80005b8:	20000280 	.word	0x20000280
 80005bc:	40020c00 	.word	0x40020c00

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af02      	add	r7, sp, #8
    // Initialiser la bibliothèque HAL
    HAL_Init();
 80005c6:	f000 fab7 	bl	8000b38 <HAL_Init>

    // Configurer l'horloge système
    SystemClock_Config();
 80005ca:	f000 f831 	bl	8000630 <SystemClock_Config>

    // Initialiser tous les périphériques configurés
    MX_GPIO_Init();
 80005ce:	f000 f899 	bl	8000704 <MX_GPIO_Init>

    // Créer le mutex
    xMutex = xSemaphoreCreateMutex();
 80005d2:	2001      	movs	r0, #1
 80005d4:	f004 f87e 	bl	80046d4 <xQueueCreateMutex>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a10      	ldr	r2, [pc, #64]	@ (800061c <main+0x5c>)
 80005dc:	6013      	str	r3, [r2, #0]

    // Vérifier si le mutex a été créé avec succès
    if (xMutex == NULL)
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <main+0x5c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d101      	bne.n	80005ea <main+0x2a>
    {
        // Le mutex n'a pas pu être créé
        while(1);
 80005e6:	bf00      	nop
 80005e8:	e7fd      	b.n	80005e6 <main+0x26>
    }

    // Créer les tâches
    xTaskCreate(Led_GateKeeper2, "LED Task 2", 128, NULL, tskIDLE_PRIORITY, NULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2300      	movs	r3, #0
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	490a      	ldr	r1, [pc, #40]	@ (8000620 <main+0x60>)
 80005f8:	480a      	ldr	r0, [pc, #40]	@ (8000624 <main+0x64>)
 80005fa:	f004 fc95 	bl	8004f28 <xTaskCreate>
    xTaskCreate(Led_GateKeeper4, "LED Task 4", 128, NULL, tskIDLE_PRIORITY, NULL);
 80005fe:	2300      	movs	r3, #0
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2300      	movs	r3, #0
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2280      	movs	r2, #128	@ 0x80
 800060a:	4907      	ldr	r1, [pc, #28]	@ (8000628 <main+0x68>)
 800060c:	4807      	ldr	r0, [pc, #28]	@ (800062c <main+0x6c>)
 800060e:	f004 fc8b 	bl	8004f28 <xTaskCreate>

    // Démarrer le scheduler
    vTaskStartScheduler();
 8000612:	f004 fdf7 	bl	8005204 <vTaskStartScheduler>

    // Boucle infinie
    while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x56>
 800061a:	bf00      	nop
 800061c:	20000280 	.word	0x20000280
 8000620:	080068b4 	.word	0x080068b4
 8000624:	080004f5 	.word	0x080004f5
 8000628:	080068c0 	.word	0x080068c0
 800062c:	08000571 	.word	0x08000571

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	@ 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 f8f2 	bl	8006828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	@ 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ae:	2307      	movs	r3, #7
 80006b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fad8 	bl	8002c6c <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c2:	f000 f91f 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2105      	movs	r1, #5
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fd39 	bl	800315c <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f0:	f000 f908 	bl	8000904 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	@ 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
 800071e:	4b6b      	ldr	r3, [pc, #428]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a6a      	ldr	r2, [pc, #424]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b68      	ldr	r3, [pc, #416]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0310 	and.w	r3, r3, #16
 8000732:	61bb      	str	r3, [r7, #24]
 8000734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	4b64      	ldr	r3, [pc, #400]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a63      	ldr	r2, [pc, #396]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b61      	ldr	r3, [pc, #388]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b5d      	ldr	r3, [pc, #372]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a5c      	ldr	r2, [pc, #368]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b5a      	ldr	r3, [pc, #360]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b56      	ldr	r3, [pc, #344]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a55      	ldr	r2, [pc, #340]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b53      	ldr	r3, [pc, #332]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a4e      	ldr	r2, [pc, #312]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b4c      	ldr	r3, [pc, #304]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b48      	ldr	r3, [pc, #288]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a47      	ldr	r2, [pc, #284]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b45      	ldr	r3, [pc, #276]	@ (80008cc <MX_GPIO_Init+0x1c8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2108      	movs	r1, #8
 80007c6:	4842      	ldr	r0, [pc, #264]	@ (80008d0 <MX_GPIO_Init+0x1cc>)
 80007c8:	f000 fc76 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2101      	movs	r1, #1
 80007d0:	4840      	ldr	r0, [pc, #256]	@ (80008d4 <MX_GPIO_Init+0x1d0>)
 80007d2:	f000 fc71 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007d6:	2200      	movs	r2, #0
 80007d8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007dc:	483e      	ldr	r0, [pc, #248]	@ (80008d8 <MX_GPIO_Init+0x1d4>)
 80007de:	f000 fc6b 	bl	80010b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007e2:	2308      	movs	r3, #8
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4835      	ldr	r0, [pc, #212]	@ (80008d0 <MX_GPIO_Init+0x1cc>)
 80007fa:	f000 fac1 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	482f      	ldr	r0, [pc, #188]	@ (80008d4 <MX_GPIO_Init+0x1d0>)
 8000816:	f000 fab3 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800082a:	2305      	movs	r3, #5
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4827      	ldr	r0, [pc, #156]	@ (80008d4 <MX_GPIO_Init+0x1d0>)
 8000836:	f000 faa3 	bl	8000d80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);*/

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800083a:	2304      	movs	r3, #4
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4823      	ldr	r0, [pc, #140]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 800084e:	f000 fa97 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000864:	2305      	movs	r3, #5
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481b      	ldr	r0, [pc, #108]	@ (80008dc <MX_GPIO_Init+0x1d8>)
 8000870:	f000 fa86 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000874:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000878:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <MX_GPIO_Init+0x1d4>)
 800088e:	f000 fa77 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000892:	2320      	movs	r3, #32
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <MX_GPIO_Init+0x1d4>)
 80008a6:	f000 fa6b 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <MX_GPIO_Init+0x1cc>)
 80008c0:	f000 fa5e 	bl	8000d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3730      	adds	r7, #48	@ 0x30
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020400 	.word	0x40020400

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 f943 	bl	8000b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40001000 	.word	0x40001000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_MspInit+0x54>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <HAL_MspInit+0x54>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <HAL_MspInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_MspInit+0x54>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	@ 0x40
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	f06f 0001 	mvn.w	r0, #1
 8000956:	f000 f9e9 	bl	8000d2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	4b33      	ldr	r3, [pc, #204]	@ (8000a4c <HAL_InitTick+0xe4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a32      	ldr	r2, [pc, #200]	@ (8000a4c <HAL_InitTick+0xe4>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
 8000988:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <HAL_InitTick+0xe4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	f003 0310 	and.w	r3, r3, #16
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000994:	f107 0210 	add.w	r2, r7, #16
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fde8 	bl	8003574 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ae:	f002 fdcd 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 80009b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80009b4:	e004      	b.n	80009c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009b6:	f002 fdc9 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 80009ba:	4603      	mov	r3, r0
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c2:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <HAL_InitTick+0xe8>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	0c9b      	lsrs	r3, r3, #18
 80009ca:	3b01      	subs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <HAL_InitTick+0xec>)
 80009d0:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <HAL_InitTick+0xec>)
 80009d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <HAL_InitTick+0xec>)
 80009de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_InitTick+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_InitTick+0xec>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <HAL_InitTick+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009f4:	4817      	ldr	r0, [pc, #92]	@ (8000a54 <HAL_InitTick+0xec>)
 80009f6:	f002 fdef 	bl	80035d8 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11b      	bne.n	8000a40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a08:	4812      	ldr	r0, [pc, #72]	@ (8000a54 <HAL_InitTick+0xec>)
 8000a0a:	f002 fe3f 	bl	800368c <HAL_TIM_Base_Start_IT>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d111      	bne.n	8000a40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a1c:	2036      	movs	r0, #54	@ 0x36
 8000a1e:	f000 f9a1 	bl	8000d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d808      	bhi.n	8000a3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	2036      	movs	r0, #54	@ 0x36
 8000a2e:	f000 f97d 	bl	8000d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_InitTick+0xf4>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e002      	b.n	8000a40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3738      	adds	r7, #56	@ 0x38
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	20000284 	.word	0x20000284
 8000a58:	40001000 	.word	0x40001000
 8000a5c:	20000004 	.word	0x20000004

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <TIM6_DAC_IRQHandler+0x10>)
 8000a9e:	f002 fe65 	bl	800376c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000284 	.word	0x20000284

08000aac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <OTG_FS_IRQHandler+0x10>)
 8000ab2:	f000 fb34 	bl	800111e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20004024 	.word	0x20004024

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f005 fe91 	bl	8006838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd53 	bl	80005c0 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b28:	080068fc 	.word	0x080068fc
  ldr r2, =_sbss
 8000b2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b30:	20004404 	.word	0x20004404

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f8d8 	bl	8000d16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f7ff fefe 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fed0 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200002cc 	.word	0x200002cc

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200002cc 	.word	0x200002cc

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	@ (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff4c 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3e:	f7ff ff61 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	6978      	ldr	r0, [r7, #20]
 8000d4a:	f7ff ffb1 	bl	8000cb0 <NVIC_EncodePriority>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff80 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff54 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	e16b      	b.n	8001074 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	f040 815a 	bne.w	800106e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d005      	beq.n	8000dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d017      	beq.n	8000e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	69b9      	ldr	r1, [r7, #24]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80b4 	beq.w	800106e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b60      	ldr	r3, [pc, #384]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a5f      	ldr	r2, [pc, #380]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b5d      	ldr	r3, [pc, #372]	@ (800108c <HAL_GPIO_Init+0x30c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f22:	4a5b      	ldr	r2, [pc, #364]	@ (8001090 <HAL_GPIO_Init+0x310>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a52      	ldr	r2, [pc, #328]	@ (8001094 <HAL_GPIO_Init+0x314>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d02b      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a51      	ldr	r2, [pc, #324]	@ (8001098 <HAL_GPIO_Init+0x318>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x222>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a50      	ldr	r2, [pc, #320]	@ (800109c <HAL_GPIO_Init+0x31c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x21e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4f      	ldr	r2, [pc, #316]	@ (80010a0 <HAL_GPIO_Init+0x320>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4e      	ldr	r2, [pc, #312]	@ (80010a4 <HAL_GPIO_Init+0x324>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x216>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4d      	ldr	r2, [pc, #308]	@ (80010a8 <HAL_GPIO_Init+0x328>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x212>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4c      	ldr	r2, [pc, #304]	@ (80010ac <HAL_GPIO_Init+0x32c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4b      	ldr	r2, [pc, #300]	@ (80010b0 <HAL_GPIO_Init+0x330>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x20a>
 8000f86:	2307      	movs	r3, #7
 8000f88:	e00e      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	e00c      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e00a      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e008      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x228>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	f002 0203 	and.w	r2, r2, #3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb8:	4935      	ldr	r1, [pc, #212]	@ (8001090 <HAL_GPIO_Init+0x310>)
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fea:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff0:	4b30      	ldr	r3, [pc, #192]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001014:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101a:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103e:	4a1d      	ldr	r2, [pc, #116]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001068:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <HAL_GPIO_Init+0x334>)
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3301      	adds	r3, #1
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	2b0f      	cmp	r3, #15
 8001078:	f67f ae90 	bls.w	8000d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3724      	adds	r7, #36	@ 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40013800 	.word	0x40013800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020c00 	.word	0x40020c00
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40021400 	.word	0x40021400
 80010ac:	40021800 	.word	0x40021800
 80010b0:	40021c00 	.word	0x40021c00
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010fc:	887a      	ldrh	r2, [r7, #2]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	041a      	lsls	r2, r3, #16
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43d9      	mvns	r1, r3
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	400b      	ands	r3, r1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fdff 	bl	8003d38 <USB_GetMode>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	f040 80fb 	bne.w	8001338 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f002 fdc2 	bl	8003cd0 <USB_ReadInterrupts>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80f1 	beq.w	8001336 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fdb9 	bl	8003cd0 <USB_ReadInterrupts>
 800115e:	4603      	mov	r3, r0
 8001160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001168:	d104      	bne.n	8001174 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001172:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fda9 	bl	8003cd0 <USB_ReadInterrupts>
 800117e:	4603      	mov	r3, r0
 8001180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001184:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001188:	d104      	bne.n	8001194 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001192:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fd99 	bl	8003cd0 <USB_ReadInterrupts>
 800119e:	4603      	mov	r3, r0
 80011a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80011a8:	d104      	bne.n	80011b4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011b2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fd89 	bl	8003cd0 <USB_ReadInterrupts>
 80011be:	4603      	mov	r3, r0
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d103      	bne.n	80011d0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2202      	movs	r2, #2
 80011ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fd7b 	bl	8003cd0 <USB_ReadInterrupts>
 80011da:	4603      	mov	r3, r0
 80011dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80011e4:	d120      	bne.n	8001228 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011ee:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d113      	bne.n	8001228 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001200:	2110      	movs	r1, #16
 8001202:	6938      	ldr	r0, [r7, #16]
 8001204:	f002 fcac 	bl	8003b60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001208:	6938      	ldr	r0, [r7, #16]
 800120a:	f002 fcdb 	bl	8003bc4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a5b      	ldrb	r3, [r3, #9]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d105      	bne.n	8001222 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2101      	movs	r1, #1
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fd99 	bl	8003d54 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f005 fa7c 	bl	8006720 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fd4f 	bl	8003cd0 <USB_ReadInterrupts>
 8001232:	4603      	mov	r3, r0
 8001234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800123c:	d102      	bne.n	8001244 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 fca1 	bl	8002b86 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fd41 	bl	8003cd0 <USB_ReadInterrupts>
 800124e:	4603      	mov	r3, r0
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b08      	cmp	r3, #8
 8001256:	d106      	bne.n	8001266 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f005 fa45 	bl	80066e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2208      	movs	r2, #8
 8001264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fd30 	bl	8003cd0 <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001276:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800127a:	d139      	bne.n	80012f0 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fda4 	bl	8003dce <USB_HC_ReadInterrupt>
 8001286:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e025      	b.n	80012da <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	fa22 f303 	lsr.w	r3, r2, r3
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d018      	beq.n	80012d4 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80012b8:	d106      	bne.n	80012c8 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f859 	bl	8001378 <HCD_HC_IN_IRQHandler>
 80012c6:	e005      	b.n	80012d4 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 febb 	bl	800204a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	795b      	ldrb	r3, [r3, #5]
 80012de:	461a      	mov	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d3d3      	bcc.n	800128e <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fceb 	bl	8003cd0 <USB_ReadInterrupts>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	2b10      	cmp	r3, #16
 8001302:	d101      	bne.n	8001308 <HAL_HCD_IRQHandler+0x1ea>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_HCD_IRQHandler+0x1ec>
 8001308:	2300      	movs	r3, #0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d014      	beq.n	8001338 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0210 	bic.w	r2, r2, #16
 800131c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f001 fb52 	bl	80029c8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0210 	orr.w	r2, r2, #16
 8001332:	619a      	str	r2, [r3, #24]
 8001334:	e000      	b.n	8001338 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001336:	bf00      	nop
    }
  }
}
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_HCD_Stop+0x16>
 8001350:	2302      	movs	r3, #2
 8001352:	e00d      	b.n	8001370 <HAL_HCD_Stop+0x32>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 fe65 	bl	8004030 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fcad 	bl	8003cf6 <USB_ReadChInterrupts>
 800139c:	4603      	mov	r3, r0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d11a      	bne.n	80013dc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	015a      	lsls	r2, r3, #5
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80013b2:	461a      	mov	r2, r3
 80013b4:	2304      	movs	r3, #4
 80013b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80013b8:	78fa      	ldrb	r2, [r7, #3]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	334d      	adds	r3, #77	@ 0x4d
 80013c8:	2207      	movs	r2, #7
 80013ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f002 fd0b 	bl	8003df0 <USB_HC_Halt>
 80013da:	e09e      	b.n	800151a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	78fa      	ldrb	r2, [r7, #3]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fc86 	bl	8003cf6 <USB_ReadChInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013f4:	d11b      	bne.n	800142e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	015a      	lsls	r2, r3, #5
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4413      	add	r3, r2
 80013fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001402:	461a      	mov	r2, r3
 8001404:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001408:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	334d      	adds	r3, #77	@ 0x4d
 800141a:	2208      	movs	r2, #8
 800141c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	78fa      	ldrb	r2, [r7, #3]
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fce2 	bl	8003df0 <USB_HC_Halt>
 800142c:	e075      	b.n	800151a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fc5d 	bl	8003cf6 <USB_ReadChInterrupts>
 800143c:	4603      	mov	r3, r0
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11a      	bne.n	800147c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4413      	add	r3, r2
 800144e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001452:	461a      	mov	r2, r3
 8001454:	2308      	movs	r3, #8
 8001456:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	334d      	adds	r3, #77	@ 0x4d
 8001468:	2206      	movs	r2, #6
 800146a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	78fa      	ldrb	r2, [r7, #3]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fcbb 	bl	8003df0 <USB_HC_Halt>
 800147a:	e04e      	b.n	800151a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fc36 	bl	8003cf6 <USB_ReadChInterrupts>
 800148a:	4603      	mov	r3, r0
 800148c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001494:	d11b      	bne.n	80014ce <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4413      	add	r3, r2
 800149e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014a2:	461a      	mov	r2, r3
 80014a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	334d      	adds	r3, #77	@ 0x4d
 80014ba:	2209      	movs	r2, #9
 80014bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	78fa      	ldrb	r2, [r7, #3]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fc92 	bl	8003df0 <USB_HC_Halt>
 80014cc:	e025      	b.n	800151a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	78fa      	ldrb	r2, [r7, #3]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fc0d 	bl	8003cf6 <USB_ReadChInterrupts>
 80014dc:	4603      	mov	r3, r0
 80014de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e2:	2b80      	cmp	r3, #128	@ 0x80
 80014e4:	d119      	bne.n	800151a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80014e6:	78fb      	ldrb	r3, [r7, #3]
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80014f2:	461a      	mov	r2, r3
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80014f8:	78fa      	ldrb	r2, [r7, #3]
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	334d      	adds	r3, #77	@ 0x4d
 8001508:	2207      	movs	r2, #7
 800150a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fc6b 	bl	8003df0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	78fa      	ldrb	r2, [r7, #3]
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fbe7 	bl	8003cf6 <USB_ReadChInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800152e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001532:	d112      	bne.n	800155a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fc57 	bl	8003df0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4413      	add	r3, r2
 800154a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800154e:	461a      	mov	r2, r3
 8001550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001554:	6093      	str	r3, [r2, #8]
 8001556:	f000 bd75 	b.w	8002044 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fbc7 	bl	8003cf6 <USB_ReadChInterrupts>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	f040 8128 	bne.w	80017c4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001580:	461a      	mov	r2, r3
 8001582:	2320      	movs	r3, #32
 8001584:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	331b      	adds	r3, #27
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d119      	bne.n	80015d0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	331b      	adds	r3, #27
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	0151      	lsls	r1, r2, #5
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	440a      	add	r2, r1
 80015c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ce:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	799b      	ldrb	r3, [r3, #6]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01b      	beq.n	8001610 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3330      	adds	r3, #48	@ 0x30
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	015a      	lsls	r2, r3, #5
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	1ac9      	subs	r1, r1, r3
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	1a9b      	subs	r3, r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4403      	add	r3, r0
 800160c:	3338      	adds	r3, #56	@ 0x38
 800160e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	334d      	adds	r3, #77	@ 0x4d
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3344      	adds	r3, #68	@ 0x44
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4413      	add	r3, r2
 8001640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001644:	461a      	mov	r2, r3
 8001646:	2301      	movs	r3, #1
 8001648:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3326      	adds	r3, #38	@ 0x26
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00a      	beq.n	8001676 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	3326      	adds	r3, #38	@ 0x26
 8001670:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001672:	2b02      	cmp	r3, #2
 8001674:	d110      	bne.n	8001698 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fbb6 	bl	8003df0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4413      	add	r3, r2
 800168c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001690:	461a      	mov	r2, r3
 8001692:	2310      	movs	r3, #16
 8001694:	6093      	str	r3, [r2, #8]
 8001696:	e03d      	b.n	8001714 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	3326      	adds	r3, #38	@ 0x26
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d00a      	beq.n	80016c4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3326      	adds	r3, #38	@ 0x26
 80016be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d127      	bne.n	8001714 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	0151      	lsls	r1, r2, #5
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	440a      	add	r2, r1
 80016da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80016de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80016e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	1a9b      	subs	r3, r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	334c      	adds	r3, #76	@ 0x4c
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	1a9b      	subs	r3, r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	334c      	adds	r3, #76	@ 0x4c
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f005 f814 	bl	800673c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	799b      	ldrb	r3, [r3, #6]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d13b      	bne.n	8001794 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	1a9b      	subs	r3, r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3338      	adds	r3, #56	@ 0x38
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4403      	add	r3, r0
 800173c:	3328      	adds	r3, #40	@ 0x28
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	440b      	add	r3, r1
 8001742:	1e59      	subs	r1, r3, #1
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4403      	add	r3, r0
 8001752:	3328      	adds	r3, #40	@ 0x28
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	fbb1 f3f3 	udiv	r3, r1, r3
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8470 	beq.w	8002044 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	333c      	adds	r3, #60	@ 0x3c
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	f083 0301 	eor.w	r3, r3, #1
 800177c:	b2d8      	uxtb	r0, r3
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	333c      	adds	r3, #60	@ 0x3c
 800178c:	4602      	mov	r2, r0
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	f000 bc58 	b.w	8002044 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	333c      	adds	r3, #60	@ 0x3c
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	f083 0301 	eor.w	r3, r3, #1
 80017ac:	b2d8      	uxtb	r0, r3
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	333c      	adds	r3, #60	@ 0x3c
 80017bc:	4602      	mov	r2, r0
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	f000 bc40 	b.w	8002044 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fa92 	bl	8003cf6 <USB_ReadChInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f003 0320 	and.w	r3, r3, #32
 80017d8:	2b20      	cmp	r3, #32
 80017da:	d131      	bne.n	8001840 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80017e8:	461a      	mov	r2, r3
 80017ea:	2320      	movs	r3, #32
 80017ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80017ee:	78fa      	ldrb	r2, [r7, #3]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	331a      	adds	r3, #26
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	f040 841f 	bne.w	8002044 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	331b      	adds	r3, #27
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	334d      	adds	r3, #77	@ 0x4d
 800182a:	2203      	movs	r2, #3
 800182c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fada 	bl	8003df0 <USB_HC_Halt>
 800183c:	f000 bc02 	b.w	8002044 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	78fa      	ldrb	r2, [r7, #3]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f002 fa54 	bl	8003cf6 <USB_ReadChInterrupts>
 800184e:	4603      	mov	r3, r0
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b02      	cmp	r3, #2
 8001856:	f040 8305 	bne.w	8001e64 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4413      	add	r3, r2
 8001862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001866:	461a      	mov	r2, r3
 8001868:	2302      	movs	r3, #2
 800186a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	334d      	adds	r3, #77	@ 0x4d
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d114      	bne.n	80018ac <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	334d      	adds	r3, #77	@ 0x4d
 8001892:	2202      	movs	r2, #2
 8001894:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	334c      	adds	r3, #76	@ 0x4c
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e2cc      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	334d      	adds	r3, #77	@ 0x4d
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d114      	bne.n	80018ec <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	334d      	adds	r3, #77	@ 0x4d
 80018d2:	2202      	movs	r2, #2
 80018d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	334c      	adds	r3, #76	@ 0x4c
 80018e6:	2205      	movs	r2, #5
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e2ac      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	334d      	adds	r3, #77	@ 0x4d
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b07      	cmp	r3, #7
 8001900:	d00b      	beq.n	800191a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	334d      	adds	r3, #77	@ 0x4d
 8001912:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001914:	2b09      	cmp	r3, #9
 8001916:	f040 80a6 	bne.w	8001a66 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	334d      	adds	r3, #77	@ 0x4d
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3344      	adds	r3, #68	@ 0x44
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	1c59      	adds	r1, r3, #1
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4403      	add	r3, r0
 800194e:	3344      	adds	r3, #68	@ 0x44
 8001950:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3344      	adds	r3, #68	@ 0x44
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d943      	bls.n	80019f0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3344      	adds	r3, #68	@ 0x44
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	331a      	adds	r3, #26
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d123      	bne.n	80019da <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	331b      	adds	r3, #27
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	331c      	adds	r3, #28
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	78fa      	ldrb	r2, [r7, #3]
 80019ca:	0151      	lsls	r1, r2, #5
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	440a      	add	r2, r1
 80019d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	334c      	adds	r3, #76	@ 0x4c
 80019ea:	2204      	movs	r2, #4
 80019ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80019ee:	e229      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	334c      	adds	r3, #76	@ 0x4c
 8001a00:	2202      	movs	r2, #2
 8001a02:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3326      	adds	r3, #38	@ 0x26
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3326      	adds	r3, #38	@ 0x26
 8001a2a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	f040 8209 	bne.w	8001e44 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	015a      	lsls	r2, r3, #5
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001a48:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a50:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001a64:	e1ee      	b.n	8001e44 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	334d      	adds	r3, #77	@ 0x4d
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	f040 80c8 	bne.w	8001c0e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	334d      	adds	r3, #77	@ 0x4d
 8001a8e:	2202      	movs	r2, #2
 8001a90:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	331b      	adds	r3, #27
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f040 81ce 	bne.w	8001e46 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3326      	adds	r3, #38	@ 0x26
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d16b      	bne.n	8001b98 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	3348      	adds	r3, #72	@ 0x48
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1c59      	adds	r1, r3, #1
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4403      	add	r3, r0
 8001ae0:	3348      	adds	r3, #72	@ 0x48
 8001ae2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3348      	adds	r3, #72	@ 0x48
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d943      	bls.n	8001b82 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	3348      	adds	r3, #72	@ 0x48
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	331b      	adds	r3, #27
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	3344      	adds	r3, #68	@ 0x44
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d809      	bhi.n	8001b4c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8001b38:	78fa      	ldrb	r2, [r7, #3]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	331c      	adds	r3, #28
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	015a      	lsls	r2, r3, #5
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4413      	add	r3, r2
 8001b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	0151      	lsls	r1, r2, #5
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	440a      	add	r2, r1
 8001b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b6a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	334c      	adds	r3, #76	@ 0x4c
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e014      	b.n	8001bac <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	334c      	adds	r3, #76	@ 0x4c
 8001b92:	2202      	movs	r2, #2
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e009      	b.n	8001bac <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	334c      	adds	r3, #76	@ 0x4c
 8001ba8:	2202      	movs	r2, #2
 8001baa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3326      	adds	r3, #38	@ 0x26
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3326      	adds	r3, #38	@ 0x26
 8001bd2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 8136 	bne.w	8001e46 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	015a      	lsls	r2, r3, #5
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001bf0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bf8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	015a      	lsls	r2, r3, #5
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e11b      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	334d      	adds	r3, #77	@ 0x4d
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	f040 8081 	bne.w	8001d28 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	334d      	adds	r3, #77	@ 0x4d
 8001c36:	2202      	movs	r2, #2
 8001c38:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	331b      	adds	r3, #27
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	f040 80fa 	bne.w	8001e46 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c52:	78fa      	ldrb	r2, [r7, #3]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a9b      	subs	r3, r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	440b      	add	r3, r1
 8001c60:	334c      	adds	r3, #76	@ 0x4c
 8001c62:	2202      	movs	r2, #2
 8001c64:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	015a      	lsls	r2, r3, #5
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	0151      	lsls	r1, r2, #5
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	440a      	add	r2, r1
 8001c7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	0151      	lsls	r1, r2, #5
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	440a      	add	r2, r1
 8001c9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ca4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	0151      	lsls	r1, r2, #5
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	440a      	add	r2, r1
 8001cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001cc0:	f023 0320 	bic.w	r3, r3, #32
 8001cc4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3326      	adds	r3, #38	@ 0x26
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001cdc:	78fa      	ldrb	r2, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	3326      	adds	r3, #38	@ 0x26
 8001cec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	f040 80a9 	bne.w	8001e46 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001d0a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001d12:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	015a      	lsls	r2, r3, #5
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d20:	461a      	mov	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e08e      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	334d      	adds	r3, #77	@ 0x4d
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d143      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	1a9b      	subs	r3, r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	334d      	adds	r3, #77	@ 0x4d
 8001d4e:	2202      	movs	r2, #2
 8001d50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	334c      	adds	r3, #76	@ 0x4c
 8001d62:	2202      	movs	r2, #2
 8001d64:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3326      	adds	r3, #38	@ 0x26
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3326      	adds	r3, #38	@ 0x26
 8001d8c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d159      	bne.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001da8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001db0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e03f      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	334d      	adds	r3, #77	@ 0x4d
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d126      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	334d      	adds	r3, #77	@ 0x4d
 8001dec:	2202      	movs	r2, #2
 8001dee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3344      	adds	r3, #68	@ 0x44
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4403      	add	r3, r0
 8001e10:	3344      	adds	r3, #68	@ 0x44
 8001e12:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	334c      	adds	r3, #76	@ 0x4c
 8001e24:	2204      	movs	r2, #4
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e00d      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	334d      	adds	r3, #77	@ 0x4d
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	f000 8100 	beq.w	8002042 <HCD_HC_IN_IRQHandler+0xcca>
 8001e42:	e000      	b.n	8001e46 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8001e44:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	334c      	adds	r3, #76	@ 0x4c
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f004 fc6d 	bl	800673c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e62:	e0ef      	b.n	8002044 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 ff42 	bl	8003cf6 <USB_ReadChInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e78:	2b40      	cmp	r3, #64	@ 0x40
 8001e7a:	d12f      	bne.n	8001edc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2340      	movs	r3, #64	@ 0x40
 8001e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	334d      	adds	r3, #77	@ 0x4d
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	331a      	adds	r3, #26
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3344      	adds	r3, #68	@ 0x44
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 ff8b 	bl	8003df0 <USB_HC_Halt>
 8001eda:	e0b3      	b.n	8002044 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 ff06 	bl	8003cf6 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	f040 80a7 	bne.w	8002044 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3326      	adds	r3, #38	@ 0x26
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d11b      	bne.n	8001f44 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3344      	adds	r3, #68	@ 0x44
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	334d      	adds	r3, #77	@ 0x4d
 8001f30:	2204      	movs	r2, #4
 8001f32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 ff57 	bl	8003df0 <USB_HC_Halt>
 8001f42:	e03f      	b.n	8001fc4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3326      	adds	r3, #38	@ 0x26
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	011b      	lsls	r3, r3, #4
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3326      	adds	r3, #38	@ 0x26
 8001f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d129      	bne.n	8001fc4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3344      	adds	r3, #68	@ 0x44
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	799b      	ldrb	r3, [r3, #6]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HCD_HC_IN_IRQHandler+0xc2a>
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	331b      	adds	r3, #27
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d110      	bne.n	8001fc4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	1a9b      	subs	r3, r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	334d      	adds	r3, #77	@ 0x4d
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 ff16 	bl	8003df0 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	331b      	adds	r3, #27
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d129      	bne.n	800202e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	331b      	adds	r3, #27
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	0151      	lsls	r1, r2, #5
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	440a      	add	r2, r1
 8002004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	0151      	lsls	r1, r2, #5
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	440a      	add	r2, r1
 8002024:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002028:	f043 0320 	orr.w	r3, r3, #32
 800202c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203a:	461a      	mov	r2, r3
 800203c:	2310      	movs	r3, #16
 800203e:	6093      	str	r3, [r2, #8]
 8002040:	e000      	b.n	8002044 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002042:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f001 fe44 	bl	8003cf6 <USB_ReadChInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d11b      	bne.n	80020b0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002084:	461a      	mov	r2, r3
 8002086:	2304      	movs	r3, #4
 8002088:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	334d      	adds	r3, #77	@ 0x4d
 800209a:	2207      	movs	r2, #7
 800209c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 fea2 	bl	8003df0 <USB_HC_Halt>
 80020ac:	f000 bc89 	b.w	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fe1c 	bl	8003cf6 <USB_ReadChInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	f040 8082 	bne.w	80021ce <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d6:	461a      	mov	r2, r3
 80020d8:	2320      	movs	r3, #32
 80020da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3319      	adds	r3, #25
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d124      	bne.n	800213c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3319      	adds	r3, #25
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	334c      	adds	r3, #76	@ 0x4c
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	334d      	adds	r3, #77	@ 0x4d
 800212a:	2203      	movs	r2, #3
 800212c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f001 fe5a 	bl	8003df0 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	331a      	adds	r3, #26
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	f040 8437 	bne.w	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	331b      	adds	r3, #27
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 842b 	bne.w	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3326      	adds	r3, #38	@ 0x26
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d009      	beq.n	8002196 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	331b      	adds	r3, #27
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	334d      	adds	r3, #77	@ 0x4d
 80021a6:	2203      	movs	r2, #3
 80021a8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fe1c 	bl	8003df0 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3344      	adds	r3, #68	@ 0x44
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e3f9      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 fd8d 	bl	8003cf6 <USB_ReadChInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021e6:	d111      	bne.n	800220c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f4:	461a      	mov	r2, r3
 80021f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021fa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f001 fdf3 	bl	8003df0 <USB_HC_Halt>
 800220a:	e3da      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fd6e 	bl	8003cf6 <USB_ReadChInterrupts>
 800221a:	4603      	mov	r3, r0
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d168      	bne.n	80022f6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3344      	adds	r3, #68	@ 0x44
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fd58 	bl	8003cf6 <USB_ReadChInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224c:	2b40      	cmp	r3, #64	@ 0x40
 800224e:	d112      	bne.n	8002276 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3319      	adds	r3, #25
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002270:	461a      	mov	r2, r3
 8002272:	2340      	movs	r3, #64	@ 0x40
 8002274:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	331b      	adds	r3, #27
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d019      	beq.n	80022c0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	1a9b      	subs	r3, r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	331b      	adds	r3, #27
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	0151      	lsls	r1, r2, #5
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	440a      	add	r2, r1
 80022b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022be:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	2301      	movs	r3, #1
 80022d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	334d      	adds	r3, #77	@ 0x4d
 80022e2:	2201      	movs	r2, #1
 80022e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fd7e 	bl	8003df0 <USB_HC_Halt>
 80022f4:	e365      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f001 fcf9 	bl	8003cf6 <USB_ReadChInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800230a:	2b40      	cmp	r3, #64	@ 0x40
 800230c:	d139      	bne.n	8002382 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	334d      	adds	r3, #77	@ 0x4d
 800231e:	2205      	movs	r2, #5
 8002320:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	331a      	adds	r3, #26
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3319      	adds	r3, #25
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3344      	adds	r3, #68	@ 0x44
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f001 fd41 	bl	8003df0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800237a:	461a      	mov	r2, r3
 800237c:	2340      	movs	r3, #64	@ 0x40
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	e31f      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f001 fcb3 	bl	8003cf6 <USB_ReadChInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11a      	bne.n	80023d0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	2308      	movs	r3, #8
 80023aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334d      	adds	r3, #77	@ 0x4d
 80023bc:	2206      	movs	r2, #6
 80023be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 fd11 	bl	8003df0 <USB_HC_Halt>
 80023ce:	e2f8      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 fc8c 	bl	8003cf6 <USB_ReadChInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d144      	bne.n	8002472 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3344      	adds	r3, #68	@ 0x44
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334d      	adds	r3, #77	@ 0x4d
 800240c:	2204      	movs	r2, #4
 800240e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3319      	adds	r3, #25
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d114      	bne.n	8002450 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	3318      	adds	r3, #24
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3319      	adds	r3, #25
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f001 fcc9 	bl	8003df0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800246a:	461a      	mov	r2, r3
 800246c:	2310      	movs	r3, #16
 800246e:	6093      	str	r3, [r2, #8]
 8002470:	e2a7      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f001 fc3b 	bl	8003cf6 <USB_ReadChInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002486:	2b80      	cmp	r3, #128	@ 0x80
 8002488:	f040 8083 	bne.w	8002592 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	799b      	ldrb	r3, [r3, #6]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334d      	adds	r3, #77	@ 0x4d
 80024a4:	2207      	movs	r2, #7
 80024a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 fc9d 	bl	8003df0 <USB_HC_Halt>
 80024b6:	e062      	b.n	800257e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3344      	adds	r3, #68	@ 0x44
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	1c59      	adds	r1, r3, #1
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4403      	add	r3, r0
 80024d8:	3344      	adds	r3, #68	@ 0x44
 80024da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3344      	adds	r3, #68	@ 0x44
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d922      	bls.n	8002538 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	3344      	adds	r3, #68	@ 0x44
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	334c      	adds	r3, #76	@ 0x4c
 8002516:	2204      	movs	r2, #4
 8002518:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334c      	adds	r3, #76	@ 0x4c
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	78fb      	ldrb	r3, [r7, #3]
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f004 f903 	bl	800673c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002536:	e022      	b.n	800257e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	334c      	adds	r3, #76	@ 0x4c
 8002548:	2202      	movs	r2, #2
 800254a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002562:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800256a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4413      	add	r3, r2
 8002586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800258a:	461a      	mov	r2, r3
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	6093      	str	r3, [r2, #8]
 8002590:	e217      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f001 fbab 	bl	8003cf6 <USB_ReadChInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025aa:	d11b      	bne.n	80025e4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	334d      	adds	r3, #77	@ 0x4d
 80025bc:	2209      	movs	r2, #9
 80025be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fc11 	bl	8003df0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025da:	461a      	mov	r2, r3
 80025dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025e0:	6093      	str	r3, [r2, #8]
 80025e2:	e1ee      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 fb82 	bl	8003cf6 <USB_ReadChInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f040 81df 	bne.w	80029bc <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	2302      	movs	r3, #2
 800260e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	334d      	adds	r3, #77	@ 0x4d
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 8093 	bne.w	800274e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	334d      	adds	r3, #77	@ 0x4d
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334c      	adds	r3, #76	@ 0x4c
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	3326      	adds	r3, #38	@ 0x26
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d00b      	beq.n	800267e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3326      	adds	r3, #38	@ 0x26
 8002676:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002678:	2b03      	cmp	r3, #3
 800267a:	f040 8190 	bne.w	800299e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	799b      	ldrb	r3, [r3, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	333d      	adds	r3, #61	@ 0x3d
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2d8      	uxtb	r0, r3
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	333d      	adds	r3, #61	@ 0x3d
 80026ae:	4602      	mov	r2, r0
 80026b0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	799b      	ldrb	r3, [r3, #6]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	f040 8171 	bne.w	800299e <HCD_HC_OUT_IRQHandler+0x954>
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3334      	adds	r3, #52	@ 0x34
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8165 	beq.w	800299e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3334      	adds	r3, #52	@ 0x34
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4403      	add	r3, r0
 80026f4:	3328      	adds	r3, #40	@ 0x28
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	440b      	add	r3, r1
 80026fa:	1e59      	subs	r1, r3, #1
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4403      	add	r3, r0
 800270a:	3328      	adds	r3, #40	@ 0x28
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002712:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 813f 	beq.w	800299e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	333d      	adds	r3, #61	@ 0x3d
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2d8      	uxtb	r0, r3
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	333d      	adds	r3, #61	@ 0x3d
 8002748:	4602      	mov	r2, r0
 800274a:	701a      	strb	r2, [r3, #0]
 800274c:	e127      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	334d      	adds	r3, #77	@ 0x4d
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d120      	bne.n	80027a6 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	334d      	adds	r3, #77	@ 0x4d
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	331b      	adds	r3, #27
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	f040 8107 	bne.w	800299e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	334c      	adds	r3, #76	@ 0x4c
 80027a0:	2202      	movs	r2, #2
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e0fb      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	334d      	adds	r3, #77	@ 0x4d
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d13a      	bne.n	8002832 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	334d      	adds	r3, #77	@ 0x4d
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	334c      	adds	r3, #76	@ 0x4c
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	331b      	adds	r3, #27
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	f040 80d1 	bne.w	800299e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	331b      	adds	r3, #27
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	440a      	add	r2, r1
 8002826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800282a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282e:	6053      	str	r3, [r2, #4]
 8002830:	e0b5      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	334d      	adds	r3, #77	@ 0x4d
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d114      	bne.n	8002872 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	334d      	adds	r3, #77	@ 0x4d
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334c      	adds	r3, #76	@ 0x4c
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e095      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	334d      	adds	r3, #77	@ 0x4d
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b06      	cmp	r3, #6
 8002886:	d114      	bne.n	80028b2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334d      	adds	r3, #77	@ 0x4d
 8002898:	2202      	movs	r2, #2
 800289a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334c      	adds	r3, #76	@ 0x4c
 80028ac:	2205      	movs	r2, #5
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e075      	b.n	800299e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	334d      	adds	r3, #77	@ 0x4d
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b07      	cmp	r3, #7
 80028c6:	d00a      	beq.n	80028de <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	334d      	adds	r3, #77	@ 0x4d
 80028d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80028da:	2b09      	cmp	r3, #9
 80028dc:	d170      	bne.n	80029c0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	334d      	adds	r3, #77	@ 0x4d
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3344      	adds	r3, #68	@ 0x44
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	1c59      	adds	r1, r3, #1
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4403      	add	r3, r0
 8002912:	3344      	adds	r3, #68	@ 0x44
 8002914:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3344      	adds	r3, #68	@ 0x44
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d914      	bls.n	8002956 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3344      	adds	r3, #68	@ 0x44
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334c      	adds	r3, #76	@ 0x4c
 8002950:	2204      	movs	r2, #4
 8002952:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002954:	e022      	b.n	800299c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	334c      	adds	r3, #76	@ 0x4c
 8002966:	2202      	movs	r2, #2
 8002968:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002980:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002988:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800299c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	334c      	adds	r3, #76	@ 0x4c
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f003 fec1 	bl	800673c <HAL_HCD_HC_NotifyURBChange_Callback>
 80029ba:	e002      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80029c0:	bf00      	nop
  }
}
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	0c5b      	lsrs	r3, r3, #17
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d004      	beq.n	8002a0e <HCD_RXQLVL_IRQHandler+0x46>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	f000 80b6 	beq.w	8002b78 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a0c:	e0b7      	b.n	8002b7e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80b3 	beq.w	8002b7c <HCD_RXQLVL_IRQHandler+0x1b4>
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	332c      	adds	r3, #44	@ 0x2c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a7 	beq.w	8002b7c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4613      	mov	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3338      	adds	r3, #56	@ 0x38
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	18d1      	adds	r1, r2, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4403      	add	r3, r0
 8002a52:	3334      	adds	r3, #52	@ 0x34
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4299      	cmp	r1, r3
 8002a58:	f200 8083 	bhi.w	8002b62 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	332c      	adds	r3, #44	@ 0x2c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	b292      	uxth	r2, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f001 f8d2 	bl	8003c20 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	332c      	adds	r3, #44	@ 0x2c
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	18d1      	adds	r1, r2, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4613      	mov	r3, r2
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4403      	add	r3, r0
 8002aa0:	332c      	adds	r3, #44	@ 0x2c
 8002aa2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3338      	adds	r3, #56	@ 0x38
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	18d1      	adds	r1, r2, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4403      	add	r3, r0
 8002ac8:	3338      	adds	r3, #56	@ 0x38
 8002aca:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	0cdb      	lsrs	r3, r3, #19
 8002adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3328      	adds	r3, #40	@ 0x28
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d13f      	bne.n	8002b7c <HCD_RXQLVL_IRQHandler+0x1b4>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d03c      	beq.n	8002b7c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b18:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b20:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	333c      	adds	r3, #60	@ 0x3c
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2d8      	uxtb	r0, r3
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	333c      	adds	r3, #60	@ 0x3c
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	701a      	strb	r2, [r3, #0]
      break;
 8002b60:	e00c      	b.n	8002b7c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	334c      	adds	r3, #76	@ 0x4c
 8002b72:	2204      	movs	r2, #4
 8002b74:	701a      	strb	r2, [r3, #0]
      break;
 8002b76:	e001      	b.n	8002b7c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002b78:	bf00      	nop
 8002b7a:	e000      	b.n	8002b7e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002b7c:	bf00      	nop
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	@ 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002bb2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d10b      	bne.n	8002bd6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f003 fd9b 	bl	8006704 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d132      	bne.n	8002c46 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f043 0308 	orr.w	r3, r3, #8
 8002be6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d126      	bne.n	8002c40 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	7a5b      	ldrb	r3, [r3, #9]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d113      	bne.n	8002c22 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002c00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c04:	d106      	bne.n	8002c14 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 f8a1 	bl	8003d54 <USB_InitFSLSPClkSel>
 8002c12:	e011      	b.n	8002c38 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 f89a 	bl	8003d54 <USB_InitFSLSPClkSel>
 8002c20:	e00a      	b.n	8002c38 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	79db      	ldrb	r3, [r3, #7]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d106      	bne.n	8002c38 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c30:	461a      	mov	r2, r3
 8002c32:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002c36:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f003 fd91 	bl	8006760 <HAL_HCD_PortEnabled_Callback>
 8002c3e:	e002      	b.n	8002c46 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f003 fd9b 	bl	800677c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	d103      	bne.n	8002c58 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f043 0320 	orr.w	r3, r3, #32
 8002c56:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6013      	str	r3, [r2, #0]
}
 8002c64:	bf00      	nop
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e267      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d075      	beq.n	8002d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c8a:	4b88      	ldr	r3, [pc, #544]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d00c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b85      	ldr	r3, [pc, #532]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d112      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca2:	4b82      	ldr	r3, [pc, #520]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cae:	d10b      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05b      	beq.n	8002d74 <HAL_RCC_OscConfig+0x108>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d157      	bne.n	8002d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e242      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x74>
 8002cd2:	4b76      	ldr	r3, [pc, #472]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a75      	ldr	r2, [pc, #468]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0x98>
 8002cea:	4b70      	ldr	r3, [pc, #448]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6f      	ldr	r2, [pc, #444]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xb0>
 8002d04:	4b69      	ldr	r3, [pc, #420]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a68      	ldr	r2, [pc, #416]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b66      	ldr	r3, [pc, #408]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a65      	ldr	r2, [pc, #404]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd ff3e 	bl	8000ba4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fd ff3a 	bl	8000ba4 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e207      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xc0>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fd ff2a 	bl	8000ba4 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fd ff26 	bl	8000ba4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1f3      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b51      	ldr	r3, [pc, #324]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0xe8>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d063      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d82:	4b4a      	ldr	r3, [pc, #296]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b44      	ldr	r3, [pc, #272]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c7      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4937      	ldr	r1, [pc, #220]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e03a      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b34      	ldr	r3, [pc, #208]	@ (8002eb0 <HAL_RCC_OscConfig+0x244>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fd fedf 	bl	8000ba4 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fd fedb 	bl	8000ba4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1a8      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b28      	ldr	r3, [pc, #160]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4925      	ldr	r1, [pc, #148]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1e:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <HAL_RCC_OscConfig+0x244>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fd febe 	bl	8000ba4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fd feba 	bl	8000ba4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e187      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d036      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <HAL_RCC_OscConfig+0x248>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fd fe9e 	bl	8000ba4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fd fe9a 	bl	8000ba4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e167      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_RCC_OscConfig+0x240>)
 8002e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x200>
 8002e8a:	e01b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_RCC_OscConfig+0x248>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e92:	f7fd fe87 	bl	8000ba4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	e00e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9a:	f7fd fe83 	bl	8000ba4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d907      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e150      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	42470000 	.word	0x42470000
 8002eb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	4b88      	ldr	r3, [pc, #544]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ea      	bne.n	8002e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 8097 	beq.w	8003000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed6:	4b81      	ldr	r3, [pc, #516]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	4a7c      	ldr	r2, [pc, #496]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	4b77      	ldr	r3, [pc, #476]	@ (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d118      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0e:	4b74      	ldr	r3, [pc, #464]	@ (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a73      	ldr	r2, [pc, #460]	@ (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fd fe43 	bl	8000ba4 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f22:	f7fd fe3f 	bl	8000ba4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e10c      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	4b6a      	ldr	r3, [pc, #424]	@ (80030e0 <HAL_RCC_OscConfig+0x474>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x2ea>
 8002f48:	4b64      	ldr	r3, [pc, #400]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4c:	4a63      	ldr	r2, [pc, #396]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f54:	e01c      	b.n	8002f90 <HAL_RCC_OscConfig+0x324>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x30c>
 8002f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f62:	4a5e      	ldr	r2, [pc, #376]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0x324>
 8002f78:	4b58      	ldr	r3, [pc, #352]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	4a57      	ldr	r2, [pc, #348]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f84:	4b55      	ldr	r3, [pc, #340]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f88:	4a54      	ldr	r2, [pc, #336]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f023 0304 	bic.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fd fe04 	bl	8000ba4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fd fe00 	bl	8000ba4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0cb      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	4b49      	ldr	r3, [pc, #292]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ee      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x334>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc4:	f7fd fdee 	bl	8000ba4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fcc:	f7fd fdea 	bl	8000ba4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e0b5      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1ee      	bne.n	8002fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4b39      	ldr	r3, [pc, #228]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	4a38      	ldr	r2, [pc, #224]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8002ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80a1 	beq.w	800314c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300a:	4b34      	ldr	r3, [pc, #208]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b08      	cmp	r3, #8
 8003014:	d05c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d141      	bne.n	80030a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301e:	4b31      	ldr	r3, [pc, #196]	@ (80030e4 <HAL_RCC_OscConfig+0x478>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fd fdbe 	bl	8000ba4 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fd fdba 	bl	8000ba4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e087      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	4b27      	ldr	r3, [pc, #156]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	019b      	lsls	r3, r3, #6
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	3b01      	subs	r3, #1
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	491b      	ldr	r1, [pc, #108]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x478>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fd fd93 	bl	8000ba4 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fd fd8f 	bl	8000ba4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e05c      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x416>
 80030a0:	e054      	b.n	800314c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fd7c 	bl	8000ba4 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fd fd78 	bl	8000ba4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e045      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x444>
 80030ce:	e03d      	b.n	800314c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e038      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x4ec>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d028      	beq.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d121      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d11a      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003118:	4013      	ands	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800311e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	4293      	cmp	r3, r2
 8003122:	d111      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	3b01      	subs	r3, #1
 8003132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40023800 	.word	0x40023800

0800315c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0cc      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b68      	ldr	r3, [pc, #416]	@ (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d90c      	bls.n	8003198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b65      	ldr	r3, [pc, #404]	@ (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	@ (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a58      	ldr	r2, [pc, #352]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a52      	ldr	r2, [pc, #328]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d044      	beq.n	800327c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d119      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d003      	beq.n	800321a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003216:	2b03      	cmp	r3, #3
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	4b3f      	ldr	r3, [pc, #252]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b3b      	ldr	r3, [pc, #236]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e067      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b37      	ldr	r3, [pc, #220]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4934      	ldr	r1, [pc, #208]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800324c:	f7fd fcaa 	bl	8000ba4 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fd fca6 	bl	8000ba4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04f      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d20c      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b22      	ldr	r3, [pc, #136]	@ (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ce:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	@ (800331c <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	@ (8003320 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <HAL_RCC_ClockConfig+0x1c8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fb30 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023c00 	.word	0x40023c00
 8003318:	40023800 	.word	0x40023800
 800331c:	080068d4 	.word	0x080068d4
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b094      	sub	sp, #80	@ 0x50
 800332e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003340:	4b79      	ldr	r3, [pc, #484]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b08      	cmp	r3, #8
 800334a:	d00d      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x40>
 800334c:	2b08      	cmp	r3, #8
 800334e:	f200 80e1 	bhi.w	8003514 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x34>
 8003356:	2b04      	cmp	r3, #4
 8003358:	d003      	beq.n	8003362 <HAL_RCC_GetSysClockFreq+0x3a>
 800335a:	e0db      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b73      	ldr	r3, [pc, #460]	@ (800352c <HAL_RCC_GetSysClockFreq+0x204>)
 800335e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003360:	e0db      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003362:	4b73      	ldr	r3, [pc, #460]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x208>)
 8003364:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003366:	e0d8      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003368:	4b6f      	ldr	r3, [pc, #444]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003370:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003372:	4b6d      	ldr	r3, [pc, #436]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d063      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b6a      	ldr	r3, [pc, #424]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	2200      	movs	r2, #0
 8003386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003388:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800338a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800338c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003390:	633b      	str	r3, [r7, #48]	@ 0x30
 8003392:	2300      	movs	r3, #0
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
 8003396:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	0159      	lsls	r1, r3, #5
 80033a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ac:	0150      	lsls	r0, r2, #5
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4621      	mov	r1, r4
 80033b4:	1a51      	subs	r1, r2, r1
 80033b6:	6139      	str	r1, [r7, #16]
 80033b8:	4629      	mov	r1, r5
 80033ba:	eb63 0301 	sbc.w	r3, r3, r1
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033cc:	4659      	mov	r1, fp
 80033ce:	018b      	lsls	r3, r1, #6
 80033d0:	4651      	mov	r1, sl
 80033d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d6:	4651      	mov	r1, sl
 80033d8:	018a      	lsls	r2, r1, #6
 80033da:	4651      	mov	r1, sl
 80033dc:	ebb2 0801 	subs.w	r8, r2, r1
 80033e0:	4659      	mov	r1, fp
 80033e2:	eb63 0901 	sbc.w	r9, r3, r1
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033fa:	4690      	mov	r8, r2
 80033fc:	4699      	mov	r9, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	eb18 0303 	adds.w	r3, r8, r3
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	462b      	mov	r3, r5
 8003408:	eb49 0303 	adc.w	r3, r9, r3
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800341a:	4629      	mov	r1, r5
 800341c:	024b      	lsls	r3, r1, #9
 800341e:	4621      	mov	r1, r4
 8003420:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003424:	4621      	mov	r1, r4
 8003426:	024a      	lsls	r2, r1, #9
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800342e:	2200      	movs	r2, #0
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003434:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003438:	f7fc feca 	bl	80001d0 <__aeabi_uldivmod>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4613      	mov	r3, r2
 8003442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003444:	e058      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003446:	4b38      	ldr	r3, [pc, #224]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	2200      	movs	r2, #0
 800344e:	4618      	mov	r0, r3
 8003450:	4611      	mov	r1, r2
 8003452:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
 800345c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	f04f 0000 	mov.w	r0, #0
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	0159      	lsls	r1, r3, #5
 800346e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003472:	0150      	lsls	r0, r2, #5
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4641      	mov	r1, r8
 800347a:	ebb2 0a01 	subs.w	sl, r2, r1
 800347e:	4649      	mov	r1, r9
 8003480:	eb63 0b01 	sbc.w	fp, r3, r1
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003490:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003494:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003498:	ebb2 040a 	subs.w	r4, r2, sl
 800349c:	eb63 050b 	sbc.w	r5, r3, fp
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	00eb      	lsls	r3, r5, #3
 80034aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ae:	00e2      	lsls	r2, r4, #3
 80034b0:	4614      	mov	r4, r2
 80034b2:	461d      	mov	r5, r3
 80034b4:	4643      	mov	r3, r8
 80034b6:	18e3      	adds	r3, r4, r3
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	464b      	mov	r3, r9
 80034bc:	eb45 0303 	adc.w	r3, r5, r3
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ce:	4629      	mov	r1, r5
 80034d0:	028b      	lsls	r3, r1, #10
 80034d2:	4621      	mov	r1, r4
 80034d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d8:	4621      	mov	r1, r4
 80034da:	028a      	lsls	r2, r1, #10
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034e2:	2200      	movs	r2, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	61fa      	str	r2, [r7, #28]
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	f7fc fe70 	bl	80001d0 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003508:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800350a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003512:	e002      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <HAL_RCC_GetSysClockFreq+0x204>)
 8003516:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800351c:	4618      	mov	r0, r3
 800351e:	3750      	adds	r7, #80	@ 0x50
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	00f42400 	.word	0x00f42400
 8003530:	007a1200 	.word	0x007a1200

08003534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_RCC_GetHCLKFreq+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000000 	.word	0x20000000

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003550:	f7ff fff0 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0a9b      	lsrs	r3, r3, #10
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	080068e4 	.word	0x080068e4

08003574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	220f      	movs	r2, #15
 8003582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003584:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003590:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800359c:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_GetClockConfig+0x5c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	08db      	lsrs	r3, r3, #3
 80035ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035b6:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <HAL_RCC_GetClockConfig+0x60>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0207 	and.w	r2, r3, #7
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	601a      	str	r2, [r3, #0]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40023c00 	.word	0x40023c00

080035d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e041      	b.n	800366e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f839 	bl	8003676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4610      	mov	r0, r2
 8003618:	f000 f9c0 	bl	800399c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	d001      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e04e      	b.n	8003742 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a23      	ldr	r2, [pc, #140]	@ (8003750 <HAL_TIM_Base_Start_IT+0xc4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d022      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ce:	d01d      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <HAL_TIM_Base_Start_IT+0xc8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d018      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <HAL_TIM_Base_Start_IT+0xcc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	@ (800375c <HAL_TIM_Base_Start_IT+0xd0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003760 <HAL_TIM_Base_Start_IT+0xd4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a19      	ldr	r2, [pc, #100]	@ (8003764 <HAL_TIM_Base_Start_IT+0xd8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x80>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <HAL_TIM_Base_Start_IT+0xdc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d010      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e007      	b.n	8003740 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40010400 	.word	0x40010400
 8003764:	40014000 	.word	0x40014000
 8003768:	40001800 	.word	0x40001800

0800376c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0202 	mvn.w	r2, #2
 80037a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8d2 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8c4 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f8d5 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d020      	beq.n	800381c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01b      	beq.n	800381c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0204 	mvn.w	r2, #4
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8ac 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f89e 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8af 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d020      	beq.n	8003868 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d01b      	beq.n	8003868 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0208 	mvn.w	r2, #8
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2204      	movs	r2, #4
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f886 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f878 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f889 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d020      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01b      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0210 	mvn.w	r2, #16
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2208      	movs	r2, #8
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f860 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f852 	bl	800394c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f863 	bl	8003974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0201 	mvn.w	r2, #1
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fd f804 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00c      	beq.n	80038fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f906 	bl	8003b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f834 	bl	8003988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0220 	mvn.w	r2, #32
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8d8 	bl	8003af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a46      	ldr	r2, [pc, #280]	@ (8003ac8 <TIM_Base_SetConfig+0x12c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ba:	d00f      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a43      	ldr	r2, [pc, #268]	@ (8003acc <TIM_Base_SetConfig+0x130>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00b      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a42      	ldr	r2, [pc, #264]	@ (8003ad0 <TIM_Base_SetConfig+0x134>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d007      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a41      	ldr	r2, [pc, #260]	@ (8003ad4 <TIM_Base_SetConfig+0x138>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d003      	beq.n	80039dc <TIM_Base_SetConfig+0x40>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a40      	ldr	r2, [pc, #256]	@ (8003ad8 <TIM_Base_SetConfig+0x13c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a35      	ldr	r2, [pc, #212]	@ (8003ac8 <TIM_Base_SetConfig+0x12c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d02b      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fc:	d027      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a32      	ldr	r2, [pc, #200]	@ (8003acc <TIM_Base_SetConfig+0x130>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d023      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a31      	ldr	r2, [pc, #196]	@ (8003ad0 <TIM_Base_SetConfig+0x134>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01f      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a30      	ldr	r2, [pc, #192]	@ (8003ad4 <TIM_Base_SetConfig+0x138>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01b      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad8 <TIM_Base_SetConfig+0x13c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d017      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2e      	ldr	r2, [pc, #184]	@ (8003adc <TIM_Base_SetConfig+0x140>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae0 <TIM_Base_SetConfig+0x144>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00f      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a2c      	ldr	r2, [pc, #176]	@ (8003ae4 <TIM_Base_SetConfig+0x148>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00b      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae8 <TIM_Base_SetConfig+0x14c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d007      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a2a      	ldr	r2, [pc, #168]	@ (8003aec <TIM_Base_SetConfig+0x150>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d003      	beq.n	8003a4e <TIM_Base_SetConfig+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a29      	ldr	r2, [pc, #164]	@ (8003af0 <TIM_Base_SetConfig+0x154>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a10      	ldr	r2, [pc, #64]	@ (8003ac8 <TIM_Base_SetConfig+0x12c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0xf8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ad8 <TIM_Base_SetConfig+0x13c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d103      	bne.n	8003a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f023 0201 	bic.w	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	611a      	str	r2, [r3, #16]
  }
}
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40010400 	.word	0x40010400
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800
 8003ae8:	40001800 	.word	0x40001800
 8003aec:	40001c00 	.word	0x40001c00
 8003af0:	40002000 	.word	0x40002000

08003af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 0201 	bic.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b7a:	d901      	bls.n	8003b80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e01b      	b.n	8003bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	daf2      	bge.n	8003b6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	019b      	lsls	r3, r3, #6
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ba4:	d901      	bls.n	8003baa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e006      	b.n	8003bb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d0f0      	beq.n	8003b98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bdc:	d901      	bls.n	8003be2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e018      	b.n	8003c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	daf2      	bge.n	8003bd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c00:	d901      	bls.n	8003c06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e006      	b.n	8003c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b10      	cmp	r3, #16
 8003c10:	d0f0      	beq.n	8003bf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b08b      	sub	sp, #44	@ 0x2c
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	e014      	b.n	8003c76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	3301      	adds	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	3301      	adds	r3, #1
 8003c68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	3301      	adds	r3, #1
 8003c74:	623b      	str	r3, [r7, #32]
 8003c76:	6a3a      	ldr	r2, [r7, #32]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d3e6      	bcc.n	8003c4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c7e:	8bfb      	ldrh	r3, [r7, #30]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01e      	beq.n	8003cc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f107 0310 	add.w	r3, r7, #16
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	701a      	strb	r2, [r3, #0]
      i++;
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	3301      	adds	r3, #1
 8003cae:	623b      	str	r3, [r7, #32]
      pDest++;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003cb6:	8bfb      	ldrh	r3, [r7, #30]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003cbc:	8bfb      	ldrh	r3, [r7, #30]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ea      	bne.n	8003c98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	372c      	adds	r7, #44	@ 0x2c
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	4013      	ands	r3, r2
 8003d28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0301 	and.w	r3, r3, #1
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d107      	bne.n	8003da6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8003da2:	6053      	str	r3, [r2, #4]
 8003da4:	e00c      	b.n	8003dc0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d107      	bne.n	8003dbc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003db2:	461a      	mov	r2, r3
 8003db4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8003db8:	6053      	str	r3, [r2, #4]
 8003dba:	e001      	b.n	8003dc0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	b29b      	uxth	r3, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b089      	sub	sp, #36	@ 0x24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	0c9b      	lsrs	r3, r3, #18
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	0fdb      	lsrs	r3, r3, #31
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	0fdb      	lsrs	r3, r3, #31
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d10d      	bne.n	8003e72 <USB_HC_Halt+0x82>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <USB_HC_Halt+0x82>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d002      	beq.n	8003e6e <USB_HC_Halt+0x7e>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d101      	bne.n	8003e72 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e0d8      	b.n	8004024 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <USB_HC_Halt+0x8e>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d173      	bne.n	8003f66 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e9c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d14a      	bne.n	8003f40 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d133      	bne.n	8003f1e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ed0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ed4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	0151      	lsls	r1, r2, #5
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	440a      	add	r2, r1
 8003eec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ef4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f02:	d82e      	bhi.n	8003f62 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f1a:	d0ec      	beq.n	8003ef6 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003f1c:	e081      	b.n	8004022 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f3c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003f3e:	e070      	b.n	8004022 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f5e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003f60:	e05f      	b.n	8004022 <USB_HC_Halt+0x232>
            break;
 8003f62:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003f64:	e05d      	b.n	8004022 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	0151      	lsls	r1, r2, #5
 8003f78:	69fa      	ldr	r2, [r7, #28]
 8003f7a:	440a      	add	r2, r1
 8003f7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f84:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d133      	bne.n	8003ffe <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fb4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003fd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fd4:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fe2:	d81d      	bhi.n	8004020 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ffa:	d0ec      	beq.n	8003fd6 <USB_HC_Halt+0x1e6>
 8003ffc:	e011      	b.n	8004022 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004018:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	e000      	b.n	8004022 <USB_HC_Halt+0x232>
          break;
 8004020:	bf00      	nop
    }
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3724      	adds	r7, #36	@ 0x24
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff fd7a 	bl	8003b3e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800404a:	2110      	movs	r1, #16
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fd87 	bl	8003b60 <USB_FlushTxFifo>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fdb1 	bl	8003bc4 <USB_FlushRxFifo>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e01f      	b.n	80040b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004088:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004090:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004098:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d9dc      	bls.n	8004072 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e034      	b.n	8004128 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80040e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f2:	461a      	mov	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004104:	d80c      	bhi.n	8004120 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800411c:	d0ec      	beq.n	80040f8 <USB_StopHost+0xc8>
 800411e:	e000      	b.n	8004122 <USB_StopHost+0xf2>
        break;
 8004120:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	3301      	adds	r3, #1
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b0f      	cmp	r3, #15
 800412c:	d9c7      	bls.n	80040be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004134:	461a      	mov	r2, r3
 8004136:	f04f 33ff 	mov.w	r3, #4294967295
 800413a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f04f 32ff 	mov.w	r2, #4294967295
 8004142:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fce9 	bl	8003b1c <USB_EnableGlobalInt>

  return ret;
 800414a:	7ffb      	ldrb	r3, [r7, #31]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f804 	bl	8004178 <USBH_HandleSof>
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b0b      	cmp	r3, #11
 8004188:	d10a      	bne.n	80041a0 <USBH_HandleSof+0x28>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
  }
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80041cc:	2200      	movs	r2, #0
 80041ce:	4619      	mov	r1, r3
 80041d0:	f000 f8ae 	bl	8004330 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80041d4:	bf00      	nop
}
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80041ec:	bf00      	nop
}
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800422c:	2200      	movs	r2, #0
 800422e:	4619      	mov	r1, r3
 8004230:	f000 f87e 	bl	8004330 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f002 fa9a 	bl	8006798 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	791b      	ldrb	r3, [r3, #4]
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f830 	bl	80042d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	795b      	ldrb	r3, [r3, #5]
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f82a 	bl	80042d0 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8004290:	2200      	movs	r2, #0
 8004292:	4619      	mov	r1, r3
 8004294:	f000 f84c 	bl	8004330 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80042be:	2200      	movs	r2, #0
 80042c0:	4619      	mov	r1, r3
 80042c2:	f000 f835 	bl	8004330 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	d80d      	bhi.n	80042fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	33e0      	adds	r3, #224	@ 0xe0
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	33e0      	adds	r3, #224	@ 0xe0
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004312:	f3ef 8305 	mrs	r3, IPSR
 8004316:	607b      	str	r3, [r7, #4]
  return(result);
 8004318:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <osMessagePut+0x1e>
    ticks = 1;
 800434a:	2301      	movs	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800434e:	f7ff ffdd 	bl	800430c <inHandlerMode>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d018      	beq.n	800438a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004358:	f107 0210 	add.w	r2, r7, #16
 800435c:	f107 0108 	add.w	r1, r7, #8
 8004360:	2300      	movs	r3, #0
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 fad0 	bl	8004908 <xQueueGenericSendFromISR>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <osMessagePut+0x42>
      return osErrorOS;
 800436e:	23ff      	movs	r3, #255	@ 0xff
 8004370:	e018      	b.n	80043a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d014      	beq.n	80043a2 <osMessagePut+0x72>
 8004378:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <osMessagePut+0x7c>)
 800437a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	e00b      	b.n	80043a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800438a:	f107 0108 	add.w	r1, r7, #8
 800438e:	2300      	movs	r3, #0
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f9b6 	bl	8004704 <xQueueGenericSend>
 8004398:	4603      	mov	r3, r0
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <osMessagePut+0x72>
      return osErrorOS;
 800439e:	23ff      	movs	r3, #255	@ 0xff
 80043a0:	e000      	b.n	80043a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f103 0208 	add.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f04f 32ff 	mov.w	r2, #4294967295
 80043c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f103 0208 	add.w	r2, r3, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f103 0208 	add.w	r2, r3, #8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d103      	bne.n	8004472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e00c      	b.n	800448c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3308      	adds	r3, #8
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e002      	b.n	8004480 <vListInsert+0x2e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	429a      	cmp	r2, r3
 800448a:	d2f6      	bcs.n	800447a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6892      	ldr	r2, [r2, #8]
 80044da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6852      	ldr	r2, [r2, #4]
 80044e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d103      	bne.n	80044f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1e5a      	subs	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004544:	f001 fdc0 	bl	80060c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	441a      	add	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004574:	3b01      	subs	r3, #1
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	22ff      	movs	r2, #255	@ 0xff
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	22ff      	movs	r2, #255	@ 0xff
 8004590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d114      	bne.n	80045c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01a      	beq.n	80045d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3310      	adds	r3, #16
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f876 	bl	8005698 <xTaskRemoveFromEventList>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d012      	beq.n	80045d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045b2:	4b0d      	ldr	r3, [pc, #52]	@ (80045e8 <xQueueGenericReset+0xd0>)
 80045b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	e009      	b.n	80045d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3310      	adds	r3, #16
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff fef1 	bl	80043b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3324      	adds	r3, #36	@ 0x24
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff feec 	bl	80043b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045d8:	f001 fda8 	bl	800612c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045dc:	2301      	movs	r3, #1
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	@ 0x28
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	4613      	mov	r3, r2
 80045f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	613b      	str	r3, [r7, #16]
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3348      	adds	r3, #72	@ 0x48
 8004626:	4618      	mov	r0, r3
 8004628:	f001 fe70 	bl	800630c <pvPortMalloc>
 800462c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d011      	beq.n	8004658 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3348      	adds	r3, #72	@ 0x48
 800463c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004646:	79fa      	ldrb	r2, [r7, #7]
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f805 	bl	8004662 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004658:	69bb      	ldr	r3, [r7, #24]
	}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e002      	b.n	8004684 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004690:	2101      	movs	r1, #1
 8004692:	69b8      	ldr	r0, [r7, #24]
 8004694:	f7ff ff40 	bl	8004518 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00e      	beq.n	80046cc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80046c0:	2300      	movs	r3, #0
 80046c2:	2200      	movs	r2, #0
 80046c4:	2100      	movs	r1, #0
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f81c 	bl	8004704 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6939      	ldr	r1, [r7, #16]
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	f7ff ff7d 	bl	80045ec <xQueueGenericCreate>
 80046f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff ffd3 	bl	80046a0 <prvInitialiseMutex>

		return xNewQueue;
 80046fa:	68fb      	ldr	r3, [r7, #12]
	}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08e      	sub	sp, #56	@ 0x38
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800471a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <xQueueGenericSend+0x34>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <xQueueGenericSend+0x42>
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <xQueueGenericSend+0x46>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <xQueueGenericSend+0x48>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <xQueueGenericSend+0x64>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d103      	bne.n	8004776 <xQueueGenericSend+0x72>
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <xQueueGenericSend+0x76>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <xQueueGenericSend+0x78>
 800477a:	2300      	movs	r3, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <xQueueGenericSend+0x94>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	623b      	str	r3, [r7, #32]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004798:	f001 f93e 	bl	8005a18 <xTaskGetSchedulerState>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <xQueueGenericSend+0xa4>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <xQueueGenericSend+0xa8>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <xQueueGenericSend+0xaa>
 80047ac:	2300      	movs	r3, #0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <xQueueGenericSend+0xc6>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	61fb      	str	r3, [r7, #28]
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80047ca:	f001 fc7d 	bl	80060c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <xQueueGenericSend+0xdc>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d129      	bne.n	8004834 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047e6:	f000 fa55 	bl	8004c94 <prvCopyDataToQueue>
 80047ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	3324      	adds	r3, #36	@ 0x24
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 ff4d 	bl	8005698 <xTaskRemoveFromEventList>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004804:	4b3f      	ldr	r3, [pc, #252]	@ (8004904 <xQueueGenericSend+0x200>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	e00a      	b.n	800482c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800481c:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <xQueueGenericSend+0x200>)
 800481e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800482c:	f001 fc7e 	bl	800612c <vPortExitCritical>
				return pdPASS;
 8004830:	2301      	movs	r3, #1
 8004832:	e063      	b.n	80048fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800483a:	f001 fc77 	bl	800612c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800483e:	2300      	movs	r3, #0
 8004840:	e05c      	b.n	80048fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	4618      	mov	r0, r3
 800484e:	f000 ff87 	bl	8005760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004852:	2301      	movs	r3, #1
 8004854:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004856:	f001 fc69 	bl	800612c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800485a:	f000 fd35 	bl	80052c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800485e:	f001 fc33 	bl	80060c8 <vPortEnterCritical>
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004868:	b25b      	sxtb	r3, r3
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d103      	bne.n	8004878 <xQueueGenericSend+0x174>
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800487e:	b25b      	sxtb	r3, r3
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d103      	bne.n	800488e <xQueueGenericSend+0x18a>
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800488e:	f001 fc4d 	bl	800612c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004892:	1d3a      	adds	r2, r7, #4
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 ff76 	bl	800578c <xTaskCheckForTimeOut>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d124      	bne.n	80048f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048a8:	f000 fac6 	bl	8004e38 <prvIsQueueFull>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	3310      	adds	r3, #16
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fec6 	bl	800564c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80048c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048c2:	f000 fa51 	bl	8004d68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80048c6:	f000 fd0d 	bl	80052e4 <xTaskResumeAll>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f47f af7c 	bne.w	80047ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80048d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <xQueueGenericSend+0x200>)
 80048d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	e772      	b.n	80047ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80048e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048e6:	f000 fa3f 	bl	8004d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ea:	f000 fcfb 	bl	80052e4 <xTaskResumeAll>
 80048ee:	e76c      	b.n	80047ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80048f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048f2:	f000 fa39 	bl	8004d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048f6:	f000 fcf5 	bl	80052e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80048fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3738      	adds	r7, #56	@ 0x38
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b090      	sub	sp, #64	@ 0x40
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800491a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004932:	bf00      	nop
 8004934:	bf00      	nop
 8004936:	e7fd      	b.n	8004934 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <xQueueGenericSendFromISR+0x3e>
 800493e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <xQueueGenericSendFromISR+0x42>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <xQueueGenericSendFromISR+0x44>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d103      	bne.n	8004976 <xQueueGenericSendFromISR+0x6e>
 800496e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <xQueueGenericSendFromISR+0x72>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <xQueueGenericSendFromISR+0x74>
 800497a:	2300      	movs	r3, #0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	623b      	str	r3, [r7, #32]
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004998:	f001 fc76 	bl	8006288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800499c:	f3ef 8211 	mrs	r2, BASEPRI
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	61fa      	str	r2, [r7, #28]
 80049b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d302      	bcc.n	80049ca <xQueueGenericSendFromISR+0xc2>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d12f      	bne.n	8004a2a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80049e0:	f000 f958 	bl	8004c94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80049e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d112      	bne.n	8004a14 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	3324      	adds	r3, #36	@ 0x24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fe4c 	bl	8005698 <xTaskRemoveFromEventList>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00e      	beq.n	8004a24 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e007      	b.n	8004a24 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a18:	3301      	adds	r3, #1
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	b25a      	sxtb	r2, r3
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004a24:	2301      	movs	r3, #1
 8004a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004a28:	e001      	b.n	8004a2e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3740      	adds	r7, #64	@ 0x40
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08e      	sub	sp, #56	@ 0x38
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10b      	bne.n	8004a78 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	623b      	str	r3, [r7, #32]
}
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a98:	f000 ffbe 	bl	8005a18 <xTaskGetSchedulerState>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <xQueueSemaphoreTake+0x64>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <xQueueSemaphoreTake+0x68>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <xQueueSemaphoreTake+0x6a>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	61bb      	str	r3, [r7, #24]
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aca:	f001 fafd 	bl	80060c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d024      	beq.n	8004b24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	1e5a      	subs	r2, r3, #1
 8004ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d104      	bne.n	8004af4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004aea:	f001 f941 	bl	8005d70 <pvTaskIncrementMutexHeldCount>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00f      	beq.n	8004b1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afe:	3310      	adds	r3, #16
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fdc9 	bl	8005698 <xTaskRemoveFromEventList>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b0c:	4b54      	ldr	r3, [pc, #336]	@ (8004c60 <xQueueSemaphoreTake+0x21c>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b1c:	f001 fb06 	bl	800612c <vPortExitCritical>
				return pdPASS;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e098      	b.n	8004c56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d112      	bne.n	8004b50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	617b      	str	r3, [r7, #20]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b48:	f001 faf0 	bl	800612c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e082      	b.n	8004c56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fe00 	bl	8005760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b64:	f001 fae2 	bl	800612c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b68:	f000 fbae 	bl	80052c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b6c:	f001 faac 	bl	80060c8 <vPortEnterCritical>
 8004b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d103      	bne.n	8004b86 <xQueueSemaphoreTake+0x142>
 8004b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d103      	bne.n	8004b9c <xQueueSemaphoreTake+0x158>
 8004b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b9c:	f001 fac6 	bl	800612c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ba0:	463a      	mov	r2, r7
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fdef 	bl	800578c <xTaskCheckForTimeOut>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d132      	bne.n	8004c1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bb6:	f000 f929 	bl	8004e0c <prvIsQueueEmpty>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d026      	beq.n	8004c0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004bc8:	f001 fa7e 	bl	80060c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 ff3f 	bl	8005a54 <xTaskPriorityInherit>
 8004bd6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004bd8:	f001 faa8 	bl	800612c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bde:	3324      	adds	r3, #36	@ 0x24
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fd31 	bl	800564c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004bec:	f000 f8bc 	bl	8004d68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bf0:	f000 fb78 	bl	80052e4 <xTaskResumeAll>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f47f af67 	bne.w	8004aca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004bfc:	4b18      	ldr	r3, [pc, #96]	@ (8004c60 <xQueueSemaphoreTake+0x21c>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	e75d      	b.n	8004aca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c10:	f000 f8aa 	bl	8004d68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c14:	f000 fb66 	bl	80052e4 <xTaskResumeAll>
 8004c18:	e757      	b.n	8004aca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c1c:	f000 f8a4 	bl	8004d68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c20:	f000 fb60 	bl	80052e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c26:	f000 f8f1 	bl	8004e0c <prvIsQueueEmpty>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f43f af4c 	beq.w	8004aca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004c38:	f001 fa46 	bl	80060c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c3e:	f000 f811 	bl	8004c64 <prvGetDisinheritPriorityAfterTimeout>
 8004c42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 f800 	bl	8005c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c50:	f001 fa6c 	bl	800612c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3738      	adds	r7, #56	@ 0x38
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d006      	beq.n	8004c82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1c3 0307 	rsb	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e001      	b.n	8004c86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c86:	68fb      	ldr	r3, [r7, #12]
	}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14d      	bne.n	8004d56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 ff3e 	bl	8005b40 <xTaskPriorityDisinherit>
 8004cc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	e043      	b.n	8004d56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d119      	bne.n	8004d08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6858      	ldr	r0, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	f001 fdce 	bl	8006880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d32b      	bcc.n	8004d56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e026      	b.n	8004d56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68d8      	ldr	r0, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	461a      	mov	r2, r3
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	f001 fdb4 	bl	8006880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	425b      	negs	r3, r3
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d207      	bcs.n	8004d44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d105      	bne.n	8004d56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d5e:	697b      	ldr	r3, [r7, #20]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d70:	f001 f9aa 	bl	80060c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d7c:	e011      	b.n	8004da2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3324      	adds	r3, #36	@ 0x24
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fc84 	bl	8005698 <xTaskRemoveFromEventList>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d96:	f000 fd5d 	bl	8005854 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	dce9      	bgt.n	8004d7e <prvUnlockQueue+0x16>
 8004daa:	e000      	b.n	8004dae <prvUnlockQueue+0x46>
					break;
 8004dac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	22ff      	movs	r2, #255	@ 0xff
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004db6:	f001 f9b9 	bl	800612c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dba:	f001 f985 	bl	80060c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dc6:	e011      	b.n	8004dec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3310      	adds	r3, #16
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fc5f 	bl	8005698 <xTaskRemoveFromEventList>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004de0:	f000 fd38 	bl	8005854 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004de4:	7bbb      	ldrb	r3, [r7, #14]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	dce9      	bgt.n	8004dc8 <prvUnlockQueue+0x60>
 8004df4:	e000      	b.n	8004df8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004df6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	22ff      	movs	r2, #255	@ 0xff
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e00:	f001 f994 	bl	800612c <vPortExitCritical>
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e14:	f001 f958 	bl	80060c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d102      	bne.n	8004e26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e001      	b.n	8004e2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e2a:	f001 f97f 	bl	800612c <vPortExitCritical>

	return xReturn;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e40:	f001 f942 	bl	80060c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d102      	bne.n	8004e56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	e001      	b.n	8004e5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e5a:	f001 f967 	bl	800612c <vPortExitCritical>

	return xReturn;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08e      	sub	sp, #56	@ 0x38
 8004e6c:	af04      	add	r7, sp, #16
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	623b      	str	r3, [r7, #32]
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	61fb      	str	r3, [r7, #28]
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eb2:	2354      	movs	r3, #84	@ 0x54
 8004eb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b54      	cmp	r3, #84	@ 0x54
 8004eba:	d00b      	beq.n	8004ed4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61bb      	str	r3, [r7, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ed4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01e      	beq.n	8004f1a <xTaskCreateStatic+0xb2>
 8004edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01b      	beq.n	8004f1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9303      	str	r3, [sp, #12]
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f850 	bl	8004fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f14:	f000 f8d6 	bl	80050c4 <prvAddNewTaskToReadyList>
 8004f18:	e001      	b.n	8004f1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f1e:	697b      	ldr	r3, [r7, #20]
	}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3728      	adds	r7, #40	@ 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	@ 0x30
 8004f2c:	af04      	add	r7, sp, #16
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 f9e5 	bl	800630c <pvPortMalloc>
 8004f42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00e      	beq.n	8004f68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f4a:	2054      	movs	r0, #84	@ 0x54
 8004f4c:	f001 f9de 	bl	800630c <pvPortMalloc>
 8004f50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f5e:	e005      	b.n	8004f6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f60:	6978      	ldr	r0, [r7, #20]
 8004f62:	f001 faa1 	bl	80064a8 <vPortFree>
 8004f66:	e001      	b.n	8004f6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d017      	beq.n	8004fa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f7a:	88fa      	ldrh	r2, [r7, #6]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9303      	str	r3, [sp, #12]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	9302      	str	r3, [sp, #8]
 8004f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f80e 	bl	8004fb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f96:	69f8      	ldr	r0, [r7, #28]
 8004f98:	f000 f894 	bl	80050c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	e002      	b.n	8004fa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fa8:	69bb      	ldr	r3, [r7, #24]
	}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
 8004fbe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f023 0307 	bic.w	r3, r3, #7
 8004fd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	617b      	str	r3, [r7, #20]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01f      	beq.n	8005042 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e012      	b.n	800502e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	7819      	ldrb	r1, [r3, #0]
 8005010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	3334      	adds	r3, #52	@ 0x34
 8005018:	460a      	mov	r2, r1
 800501a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	2b0f      	cmp	r3, #15
 8005032:	d9e9      	bls.n	8005008 <prvInitialiseNewTask+0x56>
 8005034:	e000      	b.n	8005038 <prvInitialiseNewTask+0x86>
			{
				break;
 8005036:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005040:	e003      	b.n	800504a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504c:	2b06      	cmp	r3, #6
 800504e:	d901      	bls.n	8005054 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005050:	2306      	movs	r3, #6
 8005052:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005058:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800505e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	3304      	adds	r3, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff f9c0 	bl	80043f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	3318      	adds	r3, #24
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff f9bb 	bl	80043f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800507a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	f1c3 0207 	rsb	r2, r3, #7
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	2200      	movs	r2, #0
 8005094:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	68f9      	ldr	r1, [r7, #12]
 80050a2:	69b8      	ldr	r0, [r7, #24]
 80050a4:	f000 fede 	bl	8005e64 <pxPortInitialiseStack>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ba:	bf00      	nop
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050cc:	f000 fffc 	bl	80060c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050d0:	4b2a      	ldr	r3, [pc, #168]	@ (800517c <prvAddNewTaskToReadyList+0xb8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a29      	ldr	r2, [pc, #164]	@ (800517c <prvAddNewTaskToReadyList+0xb8>)
 80050d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050da:	4b29      	ldr	r3, [pc, #164]	@ (8005180 <prvAddNewTaskToReadyList+0xbc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050e2:	4a27      	ldr	r2, [pc, #156]	@ (8005180 <prvAddNewTaskToReadyList+0xbc>)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050e8:	4b24      	ldr	r3, [pc, #144]	@ (800517c <prvAddNewTaskToReadyList+0xb8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d110      	bne.n	8005112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050f0:	f000 fbd4 	bl	800589c <prvInitialiseTaskLists>
 80050f4:	e00d      	b.n	8005112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050f6:	4b23      	ldr	r3, [pc, #140]	@ (8005184 <prvAddNewTaskToReadyList+0xc0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d109      	bne.n	8005112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050fe:	4b20      	ldr	r3, [pc, #128]	@ (8005180 <prvAddNewTaskToReadyList+0xbc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	429a      	cmp	r2, r3
 800510a:	d802      	bhi.n	8005112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800510c:	4a1c      	ldr	r2, [pc, #112]	@ (8005180 <prvAddNewTaskToReadyList+0xbc>)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005112:	4b1d      	ldr	r3, [pc, #116]	@ (8005188 <prvAddNewTaskToReadyList+0xc4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <prvAddNewTaskToReadyList+0xc4>)
 800511a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	2201      	movs	r2, #1
 8005122:	409a      	lsls	r2, r3
 8005124:	4b19      	ldr	r3, [pc, #100]	@ (800518c <prvAddNewTaskToReadyList+0xc8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4313      	orrs	r3, r2
 800512a:	4a18      	ldr	r2, [pc, #96]	@ (800518c <prvAddNewTaskToReadyList+0xc8>)
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4a15      	ldr	r2, [pc, #84]	@ (8005190 <prvAddNewTaskToReadyList+0xcc>)
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3304      	adds	r3, #4
 8005142:	4619      	mov	r1, r3
 8005144:	4610      	mov	r0, r2
 8005146:	f7ff f960 	bl	800440a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800514a:	f000 ffef 	bl	800612c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <prvAddNewTaskToReadyList+0xc0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <prvAddNewTaskToReadyList+0xbc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	429a      	cmp	r2, r3
 8005162:	d207      	bcs.n	8005174 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005164:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <prvAddNewTaskToReadyList+0xd0>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	200003d0 	.word	0x200003d0
 8005180:	200002d0 	.word	0x200002d0
 8005184:	200003dc 	.word	0x200003dc
 8005188:	200003ec 	.word	0x200003ec
 800518c:	200003d8 	.word	0x200003d8
 8005190:	200002d4 	.word	0x200002d4
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051aa:	4b14      	ldr	r3, [pc, #80]	@ (80051fc <vTaskDelay+0x64>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <vTaskDelay+0x32>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60bb      	str	r3, [r7, #8]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051ca:	f000 f87d 	bl	80052c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051ce:	2100      	movs	r1, #0
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fde1 	bl	8005d98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051d6:	f000 f885 	bl	80052e4 <xTaskResumeAll>
 80051da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d107      	bne.n	80051f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80051e2:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <vTaskDelay+0x68>)
 80051e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200003f8 	.word	0x200003f8
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08a      	sub	sp, #40	@ 0x28
 8005208:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005212:	463a      	mov	r2, r7
 8005214:	1d39      	adds	r1, r7, #4
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	4618      	mov	r0, r3
 800521c:	f7fb f950 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	9202      	str	r2, [sp, #8]
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	2300      	movs	r3, #0
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	460a      	mov	r2, r1
 8005232:	491f      	ldr	r1, [pc, #124]	@ (80052b0 <vTaskStartScheduler+0xac>)
 8005234:	481f      	ldr	r0, [pc, #124]	@ (80052b4 <vTaskStartScheduler+0xb0>)
 8005236:	f7ff fe17 	bl	8004e68 <xTaskCreateStatic>
 800523a:	4603      	mov	r3, r0
 800523c:	4a1e      	ldr	r2, [pc, #120]	@ (80052b8 <vTaskStartScheduler+0xb4>)
 800523e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <vTaskStartScheduler+0xb4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e001      	b.n	8005252 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d116      	bne.n	8005286 <vTaskStartScheduler+0x82>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	613b      	str	r3, [r7, #16]
}
 800526a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800526c:	4b13      	ldr	r3, [pc, #76]	@ (80052bc <vTaskStartScheduler+0xb8>)
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005274:	4b12      	ldr	r3, [pc, #72]	@ (80052c0 <vTaskStartScheduler+0xbc>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800527a:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <vTaskStartScheduler+0xc0>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005280:	f000 fe7e 	bl	8005f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005284:	e00f      	b.n	80052a6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d10b      	bne.n	80052a6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	60fb      	str	r3, [r7, #12]
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop
 80052a4:	e7fd      	b.n	80052a2 <vTaskStartScheduler+0x9e>
}
 80052a6:	bf00      	nop
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	080068cc 	.word	0x080068cc
 80052b4:	0800586d 	.word	0x0800586d
 80052b8:	200003f4 	.word	0x200003f4
 80052bc:	200003f0 	.word	0x200003f0
 80052c0:	200003dc 	.word	0x200003dc
 80052c4:	200003d4 	.word	0x200003d4

080052c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052cc:	4b04      	ldr	r3, [pc, #16]	@ (80052e0 <vTaskSuspendAll+0x18>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	4a03      	ldr	r2, [pc, #12]	@ (80052e0 <vTaskSuspendAll+0x18>)
 80052d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052d6:	bf00      	nop
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	200003f8 	.word	0x200003f8

080052e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052f2:	4b42      	ldr	r3, [pc, #264]	@ (80053fc <xTaskResumeAll+0x118>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <xTaskResumeAll+0x2e>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	603b      	str	r3, [r7, #0]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005312:	f000 fed9 	bl	80060c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005316:	4b39      	ldr	r3, [pc, #228]	@ (80053fc <xTaskResumeAll+0x118>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3b01      	subs	r3, #1
 800531c:	4a37      	ldr	r2, [pc, #220]	@ (80053fc <xTaskResumeAll+0x118>)
 800531e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005320:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <xTaskResumeAll+0x118>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d161      	bne.n	80053ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005328:	4b35      	ldr	r3, [pc, #212]	@ (8005400 <xTaskResumeAll+0x11c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d05d      	beq.n	80053ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005330:	e02e      	b.n	8005390 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005332:	4b34      	ldr	r3, [pc, #208]	@ (8005404 <xTaskResumeAll+0x120>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3318      	adds	r3, #24
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff f8c0 	bl	80044c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff f8bb 	bl	80044c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	2201      	movs	r2, #1
 8005354:	409a      	lsls	r2, r3
 8005356:	4b2c      	ldr	r3, [pc, #176]	@ (8005408 <xTaskResumeAll+0x124>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4313      	orrs	r3, r2
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <xTaskResumeAll+0x124>)
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4a27      	ldr	r2, [pc, #156]	@ (800540c <xTaskResumeAll+0x128>)
 800536e:	441a      	add	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3304      	adds	r3, #4
 8005374:	4619      	mov	r1, r3
 8005376:	4610      	mov	r0, r2
 8005378:	f7ff f847 	bl	800440a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	4b23      	ldr	r3, [pc, #140]	@ (8005410 <xTaskResumeAll+0x12c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800538a:	4b22      	ldr	r3, [pc, #136]	@ (8005414 <xTaskResumeAll+0x130>)
 800538c:	2201      	movs	r2, #1
 800538e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005390:	4b1c      	ldr	r3, [pc, #112]	@ (8005404 <xTaskResumeAll+0x120>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1cc      	bne.n	8005332 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800539e:	f000 fb1b 	bl	80059d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005418 <xTaskResumeAll+0x134>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053ae:	f000 f837 	bl	8005420 <xTaskIncrementTick>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053b8:	4b16      	ldr	r3, [pc, #88]	@ (8005414 <xTaskResumeAll+0x130>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f1      	bne.n	80053ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053ca:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <xTaskResumeAll+0x134>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053d0:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <xTaskResumeAll+0x130>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053dc:	4b0f      	ldr	r3, [pc, #60]	@ (800541c <xTaskResumeAll+0x138>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053ec:	f000 fe9e 	bl	800612c <vPortExitCritical>

	return xAlreadyYielded;
 80053f0:	68bb      	ldr	r3, [r7, #8]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200003f8 	.word	0x200003f8
 8005400:	200003d0 	.word	0x200003d0
 8005404:	20000390 	.word	0x20000390
 8005408:	200003d8 	.word	0x200003d8
 800540c:	200002d4 	.word	0x200002d4
 8005410:	200002d0 	.word	0x200002d0
 8005414:	200003e4 	.word	0x200003e4
 8005418:	200003e0 	.word	0x200003e0
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542a:	4b4f      	ldr	r3, [pc, #316]	@ (8005568 <xTaskIncrementTick+0x148>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 808f 	bne.w	8005552 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005434:	4b4d      	ldr	r3, [pc, #308]	@ (800556c <xTaskIncrementTick+0x14c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800543c:	4a4b      	ldr	r2, [pc, #300]	@ (800556c <xTaskIncrementTick+0x14c>)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d121      	bne.n	800548c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005448:	4b49      	ldr	r3, [pc, #292]	@ (8005570 <xTaskIncrementTick+0x150>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00b      	beq.n	800546a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	603b      	str	r3, [r7, #0]
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	e7fd      	b.n	8005466 <xTaskIncrementTick+0x46>
 800546a:	4b41      	ldr	r3, [pc, #260]	@ (8005570 <xTaskIncrementTick+0x150>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	4b40      	ldr	r3, [pc, #256]	@ (8005574 <xTaskIncrementTick+0x154>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a3e      	ldr	r2, [pc, #248]	@ (8005570 <xTaskIncrementTick+0x150>)
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	4a3e      	ldr	r2, [pc, #248]	@ (8005574 <xTaskIncrementTick+0x154>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b3e      	ldr	r3, [pc, #248]	@ (8005578 <xTaskIncrementTick+0x158>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	4a3c      	ldr	r2, [pc, #240]	@ (8005578 <xTaskIncrementTick+0x158>)
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	f000 faa6 	bl	80059d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800548c:	4b3b      	ldr	r3, [pc, #236]	@ (800557c <xTaskIncrementTick+0x15c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d348      	bcc.n	8005528 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005496:	4b36      	ldr	r3, [pc, #216]	@ (8005570 <xTaskIncrementTick+0x150>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d104      	bne.n	80054aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a0:	4b36      	ldr	r3, [pc, #216]	@ (800557c <xTaskIncrementTick+0x15c>)
 80054a2:	f04f 32ff 	mov.w	r2, #4294967295
 80054a6:	601a      	str	r2, [r3, #0]
					break;
 80054a8:	e03e      	b.n	8005528 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054aa:	4b31      	ldr	r3, [pc, #196]	@ (8005570 <xTaskIncrementTick+0x150>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d203      	bcs.n	80054ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054c2:	4a2e      	ldr	r2, [pc, #184]	@ (800557c <xTaskIncrementTick+0x15c>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054c8:	e02e      	b.n	8005528 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fff8 	bl	80044c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	3318      	adds	r3, #24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fe ffef 	bl	80044c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	2201      	movs	r2, #1
 80054ec:	409a      	lsls	r2, r3
 80054ee:	4b24      	ldr	r3, [pc, #144]	@ (8005580 <xTaskIncrementTick+0x160>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	4a22      	ldr	r2, [pc, #136]	@ (8005580 <xTaskIncrementTick+0x160>)
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4a1f      	ldr	r2, [pc, #124]	@ (8005584 <xTaskIncrementTick+0x164>)
 8005506:	441a      	add	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f7fe ff7b 	bl	800440a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005518:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <xTaskIncrementTick+0x168>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	429a      	cmp	r2, r3
 8005520:	d3b9      	bcc.n	8005496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005522:	2301      	movs	r3, #1
 8005524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005526:	e7b6      	b.n	8005496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005528:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <xTaskIncrementTick+0x168>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552e:	4915      	ldr	r1, [pc, #84]	@ (8005584 <xTaskIncrementTick+0x164>)
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d901      	bls.n	8005544 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005540:	2301      	movs	r3, #1
 8005542:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005544:	4b11      	ldr	r3, [pc, #68]	@ (800558c <xTaskIncrementTick+0x16c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800554c:	2301      	movs	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e004      	b.n	800555c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005552:	4b0f      	ldr	r3, [pc, #60]	@ (8005590 <xTaskIncrementTick+0x170>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	4a0d      	ldr	r2, [pc, #52]	@ (8005590 <xTaskIncrementTick+0x170>)
 800555a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800555c:	697b      	ldr	r3, [r7, #20]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200003f8 	.word	0x200003f8
 800556c:	200003d4 	.word	0x200003d4
 8005570:	20000388 	.word	0x20000388
 8005574:	2000038c 	.word	0x2000038c
 8005578:	200003e8 	.word	0x200003e8
 800557c:	200003f0 	.word	0x200003f0
 8005580:	200003d8 	.word	0x200003d8
 8005584:	200002d4 	.word	0x200002d4
 8005588:	200002d0 	.word	0x200002d0
 800558c:	200003e4 	.word	0x200003e4
 8005590:	200003e0 	.word	0x200003e0

08005594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800559a:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <vTaskSwitchContext+0xa4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055a2:	4b26      	ldr	r3, [pc, #152]	@ (800563c <vTaskSwitchContext+0xa8>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055a8:	e040      	b.n	800562c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80055aa:	4b24      	ldr	r3, [pc, #144]	@ (800563c <vTaskSwitchContext+0xa8>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b0:	4b23      	ldr	r3, [pc, #140]	@ (8005640 <vTaskSwitchContext+0xac>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	fab3 f383 	clz	r3, r3
 80055bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	f1c3 031f 	rsb	r3, r3, #31
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	491f      	ldr	r1, [pc, #124]	@ (8005644 <vTaskSwitchContext+0xb0>)
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	607b      	str	r3, [r7, #4]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <vTaskSwitchContext+0x5a>
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4a11      	ldr	r2, [pc, #68]	@ (8005644 <vTaskSwitchContext+0xb0>)
 80055fe:	4413      	add	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3308      	adds	r3, #8
 8005614:	429a      	cmp	r2, r3
 8005616:	d104      	bne.n	8005622 <vTaskSwitchContext+0x8e>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a07      	ldr	r2, [pc, #28]	@ (8005648 <vTaskSwitchContext+0xb4>)
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	200003f8 	.word	0x200003f8
 800563c:	200003e4 	.word	0x200003e4
 8005640:	200003d8 	.word	0x200003d8
 8005644:	200002d4 	.word	0x200002d4
 8005648:	200002d0 	.word	0x200002d0

0800564c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	60fb      	str	r3, [r7, #12]
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005674:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <vTaskPlaceOnEventList+0x48>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3318      	adds	r3, #24
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fe fee8 	bl	8004452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005682:	2101      	movs	r1, #1
 8005684:	6838      	ldr	r0, [r7, #0]
 8005686:	f000 fb87 	bl	8005d98 <prvAddCurrentTaskToDelayedList>
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200002d0 	.word	0x200002d0

08005698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60fb      	str	r3, [r7, #12]
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	e7fd      	b.n	80056c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	3318      	adds	r3, #24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe fefa 	bl	80044c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <xTaskRemoveFromEventList+0xb0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d11c      	bne.n	8005712 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe fef1 	bl	80044c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	2201      	movs	r2, #1
 80056e8:	409a      	lsls	r2, r3
 80056ea:	4b18      	ldr	r3, [pc, #96]	@ (800574c <xTaskRemoveFromEventList+0xb4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	4a16      	ldr	r2, [pc, #88]	@ (800574c <xTaskRemoveFromEventList+0xb4>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4a13      	ldr	r2, [pc, #76]	@ (8005750 <xTaskRemoveFromEventList+0xb8>)
 8005702:	441a      	add	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f7fe fe7d 	bl	800440a <vListInsertEnd>
 8005710:	e005      	b.n	800571e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3318      	adds	r3, #24
 8005716:	4619      	mov	r1, r3
 8005718:	480e      	ldr	r0, [pc, #56]	@ (8005754 <xTaskRemoveFromEventList+0xbc>)
 800571a:	f7fe fe76 	bl	800440a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005722:	4b0d      	ldr	r3, [pc, #52]	@ (8005758 <xTaskRemoveFromEventList+0xc0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	429a      	cmp	r2, r3
 800572a:	d905      	bls.n	8005738 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005730:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <xTaskRemoveFromEventList+0xc4>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e001      	b.n	800573c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800573c:	697b      	ldr	r3, [r7, #20]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200003f8 	.word	0x200003f8
 800574c:	200003d8 	.word	0x200003d8
 8005750:	200002d4 	.word	0x200002d4
 8005754:	20000390 	.word	0x20000390
 8005758:	200002d0 	.word	0x200002d0
 800575c:	200003e4 	.word	0x200003e4

08005760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005768:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <vTaskInternalSetTimeOutState+0x24>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005770:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <vTaskInternalSetTimeOutState+0x28>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	605a      	str	r2, [r3, #4]
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	200003e8 	.word	0x200003e8
 8005788:	200003d4 	.word	0x200003d4

0800578c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10b      	bne.n	80057b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	613b      	str	r3, [r7, #16]
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	e7fd      	b.n	80057b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60fb      	str	r3, [r7, #12]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80057d2:	f000 fc79 	bl	80060c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057d6:	4b1d      	ldr	r3, [pc, #116]	@ (800584c <xTaskCheckForTimeOut+0xc0>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d102      	bne.n	80057f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	e023      	b.n	800583e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <xTaskCheckForTimeOut+0xc4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d007      	beq.n	8005812 <xTaskCheckForTimeOut+0x86>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800580c:	2301      	movs	r3, #1
 800580e:	61fb      	str	r3, [r7, #28]
 8005810:	e015      	b.n	800583e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	429a      	cmp	r2, r3
 800581a:	d20b      	bcs.n	8005834 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff99 	bl	8005760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800582e:	2300      	movs	r3, #0
 8005830:	61fb      	str	r3, [r7, #28]
 8005832:	e004      	b.n	800583e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800583a:	2301      	movs	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800583e:	f000 fc75 	bl	800612c <vPortExitCritical>

	return xReturn;
 8005842:	69fb      	ldr	r3, [r7, #28]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	200003d4 	.word	0x200003d4
 8005850:	200003e8 	.word	0x200003e8

08005854 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005858:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <vTaskMissedYield+0x14>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
}
 800585e:	bf00      	nop
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	200003e4 	.word	0x200003e4

0800586c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005874:	f000 f852 	bl	800591c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <prvIdleTask+0x28>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d9f9      	bls.n	8005874 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <prvIdleTask+0x2c>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005890:	e7f0      	b.n	8005874 <prvIdleTask+0x8>
 8005892:	bf00      	nop
 8005894:	200002d4 	.word	0x200002d4
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058a2:	2300      	movs	r3, #0
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	e00c      	b.n	80058c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4a12      	ldr	r2, [pc, #72]	@ (80058fc <prvInitialiseTaskLists+0x60>)
 80058b4:	4413      	add	r3, r2
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe fd7a 	bl	80043b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3301      	adds	r3, #1
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b06      	cmp	r3, #6
 80058c6:	d9ef      	bls.n	80058a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058c8:	480d      	ldr	r0, [pc, #52]	@ (8005900 <prvInitialiseTaskLists+0x64>)
 80058ca:	f7fe fd71 	bl	80043b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058ce:	480d      	ldr	r0, [pc, #52]	@ (8005904 <prvInitialiseTaskLists+0x68>)
 80058d0:	f7fe fd6e 	bl	80043b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058d4:	480c      	ldr	r0, [pc, #48]	@ (8005908 <prvInitialiseTaskLists+0x6c>)
 80058d6:	f7fe fd6b 	bl	80043b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058da:	480c      	ldr	r0, [pc, #48]	@ (800590c <prvInitialiseTaskLists+0x70>)
 80058dc:	f7fe fd68 	bl	80043b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058e0:	480b      	ldr	r0, [pc, #44]	@ (8005910 <prvInitialiseTaskLists+0x74>)
 80058e2:	f7fe fd65 	bl	80043b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <prvInitialiseTaskLists+0x78>)
 80058e8:	4a05      	ldr	r2, [pc, #20]	@ (8005900 <prvInitialiseTaskLists+0x64>)
 80058ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <prvInitialiseTaskLists+0x7c>)
 80058ee:	4a05      	ldr	r2, [pc, #20]	@ (8005904 <prvInitialiseTaskLists+0x68>)
 80058f0:	601a      	str	r2, [r3, #0]
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	200002d4 	.word	0x200002d4
 8005900:	20000360 	.word	0x20000360
 8005904:	20000374 	.word	0x20000374
 8005908:	20000390 	.word	0x20000390
 800590c:	200003a4 	.word	0x200003a4
 8005910:	200003bc 	.word	0x200003bc
 8005914:	20000388 	.word	0x20000388
 8005918:	2000038c 	.word	0x2000038c

0800591c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005922:	e019      	b.n	8005958 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005924:	f000 fbd0 	bl	80060c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005928:	4b10      	ldr	r3, [pc, #64]	@ (800596c <prvCheckTasksWaitingTermination+0x50>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3304      	adds	r3, #4
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe fdc5 	bl	80044c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <prvCheckTasksWaitingTermination+0x54>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	4a0b      	ldr	r2, [pc, #44]	@ (8005970 <prvCheckTasksWaitingTermination+0x54>)
 8005942:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005944:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <prvCheckTasksWaitingTermination+0x58>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3b01      	subs	r3, #1
 800594a:	4a0a      	ldr	r2, [pc, #40]	@ (8005974 <prvCheckTasksWaitingTermination+0x58>)
 800594c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800594e:	f000 fbed 	bl	800612c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f810 	bl	8005978 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <prvCheckTasksWaitingTermination+0x58>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e1      	bne.n	8005924 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */

}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	200003a4 	.word	0x200003a4
 8005970:	200003d0 	.word	0x200003d0
 8005974:	200003b8 	.word	0x200003b8

08005978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005986:	2b00      	cmp	r3, #0
 8005988:	d108      	bne.n	800599c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fd8a 	bl	80064a8 <vPortFree>
				vPortFree( pxTCB );
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fd87 	bl	80064a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800599a:	e019      	b.n	80059d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d103      	bne.n	80059ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fd7e 	bl	80064a8 <vPortFree>
	}
 80059ac:	e010      	b.n	80059d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d00b      	beq.n	80059d0 <prvDeleteTCB+0x58>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	60fb      	str	r3, [r7, #12]
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	e7fd      	b.n	80059cc <prvDeleteTCB+0x54>
	}
 80059d0:	bf00      	nop
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059de:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <prvResetNextTaskUnblockTime+0x38>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a14 <prvResetNextTaskUnblockTime+0x3c>)
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059f0:	e008      	b.n	8005a04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f2:	4b07      	ldr	r3, [pc, #28]	@ (8005a10 <prvResetNextTaskUnblockTime+0x38>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	4a04      	ldr	r2, [pc, #16]	@ (8005a14 <prvResetNextTaskUnblockTime+0x3c>)
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000388 	.word	0x20000388
 8005a14:	200003f0 	.word	0x200003f0

08005a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <xTaskGetSchedulerState+0x34>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a26:	2301      	movs	r3, #1
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	e008      	b.n	8005a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a2c:	4b08      	ldr	r3, [pc, #32]	@ (8005a50 <xTaskGetSchedulerState+0x38>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a34:	2302      	movs	r3, #2
 8005a36:	607b      	str	r3, [r7, #4]
 8005a38:	e001      	b.n	8005a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a3e:	687b      	ldr	r3, [r7, #4]
	}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	200003dc 	.word	0x200003dc
 8005a50:	200003f8 	.word	0x200003f8

08005a54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d05e      	beq.n	8005b28 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6e:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <xTaskPriorityInherit+0xe0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d24e      	bcs.n	8005b16 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	db06      	blt.n	8005a8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a80:	4b2c      	ldr	r3, [pc, #176]	@ (8005b34 <xTaskPriorityInherit+0xe0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	f1c3 0207 	rsb	r2, r3, #7
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6959      	ldr	r1, [r3, #20]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4a26      	ldr	r2, [pc, #152]	@ (8005b38 <xTaskPriorityInherit+0xe4>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	4299      	cmp	r1, r3
 8005aa4:	d12f      	bne.n	8005b06 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe fd0a 	bl	80044c4 <uxListRemove>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	2201      	movs	r2, #1
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	43da      	mvns	r2, r3
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b3c <xTaskPriorityInherit+0xe8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <xTaskPriorityInherit+0xe8>)
 8005aca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <xTaskPriorityInherit+0xe0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	2201      	movs	r2, #1
 8005adc:	409a      	lsls	r2, r3
 8005ade:	4b17      	ldr	r3, [pc, #92]	@ (8005b3c <xTaskPriorityInherit+0xe8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	4a15      	ldr	r2, [pc, #84]	@ (8005b3c <xTaskPriorityInherit+0xe8>)
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4a10      	ldr	r2, [pc, #64]	@ (8005b38 <xTaskPriorityInherit+0xe4>)
 8005af6:	441a      	add	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f7fe fc83 	bl	800440a <vListInsertEnd>
 8005b04:	e004      	b.n	8005b10 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b06:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <xTaskPriorityInherit+0xe0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e008      	b.n	8005b28 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b1a:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <xTaskPriorityInherit+0xe0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d201      	bcs.n	8005b28 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b28:	68fb      	ldr	r3, [r7, #12]
	}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	200002d0 	.word	0x200002d0
 8005b38:	200002d4 	.word	0x200002d4
 8005b3c:	200003d8 	.word	0x200003d8

08005b40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d070      	beq.n	8005c38 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b56:	4b3b      	ldr	r3, [pc, #236]	@ (8005c44 <xTaskPriorityDisinherit+0x104>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d00b      	beq.n	8005b78 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60fb      	str	r3, [r7, #12]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60bb      	str	r3, [r7, #8]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d044      	beq.n	8005c38 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d140      	bne.n	8005c38 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fc82 	bl	80044c4 <uxListRemove>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d115      	bne.n	8005bf2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bca:	491f      	ldr	r1, [pc, #124]	@ (8005c48 <xTaskPriorityDisinherit+0x108>)
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xTaskPriorityDisinherit+0xb2>
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	2201      	movs	r2, #1
 8005be2:	fa02 f303 	lsl.w	r3, r2, r3
 8005be6:	43da      	mvns	r2, r3
 8005be8:	4b18      	ldr	r3, [pc, #96]	@ (8005c4c <xTaskPriorityDisinherit+0x10c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4013      	ands	r3, r2
 8005bee:	4a17      	ldr	r2, [pc, #92]	@ (8005c4c <xTaskPriorityDisinherit+0x10c>)
 8005bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	f1c3 0207 	rsb	r2, r3, #7
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005c4c <xTaskPriorityDisinherit+0x10c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	4a0d      	ldr	r2, [pc, #52]	@ (8005c4c <xTaskPriorityDisinherit+0x10c>)
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4a08      	ldr	r2, [pc, #32]	@ (8005c48 <xTaskPriorityDisinherit+0x108>)
 8005c26:	441a      	add	r2, r3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe fbeb 	bl	800440a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c38:	697b      	ldr	r3, [r7, #20]
	}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	200002d0 	.word	0x200002d0
 8005c48:	200002d4 	.word	0x200002d4
 8005c4c:	200003d8 	.word	0x200003d8

08005c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d079      	beq.n	8005d5c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	60fb      	str	r3, [r7, #12]
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	e7fd      	b.n	8005c84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d902      	bls.n	8005c98 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	61fb      	str	r3, [r7, #28]
 8005c96:	e002      	b.n	8005c9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d059      	beq.n	8005d5c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d154      	bne.n	8005d5c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d10b      	bne.n	8005cd4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60bb      	str	r3, [r7, #8]
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	e7fd      	b.n	8005cd0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	db04      	blt.n	8005cf2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f1c3 0207 	rsb	r2, r3, #7
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	6959      	ldr	r1, [r3, #20]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4a19      	ldr	r2, [pc, #100]	@ (8005d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005d02:	4413      	add	r3, r2
 8005d04:	4299      	cmp	r1, r3
 8005d06:	d129      	bne.n	8005d5c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe fbd9 	bl	80044c4 <uxListRemove>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43da      	mvns	r2, r3
 8005d24:	4b11      	ldr	r3, [pc, #68]	@ (8005d6c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	4a10      	ldr	r2, [pc, #64]	@ (8005d6c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	2201      	movs	r2, #1
 8005d34:	409a      	lsls	r2, r3
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d6c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4a06      	ldr	r2, [pc, #24]	@ (8005d68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005d4e:	441a      	add	r2, r3
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fe fb57 	bl	800440a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d5c:	bf00      	nop
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	200002d0 	.word	0x200002d0
 8005d68:	200002d4 	.word	0x200002d4
 8005d6c:	200003d8 	.word	0x200003d8

08005d70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d74:	4b07      	ldr	r3, [pc, #28]	@ (8005d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d7c:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d82:	3201      	adds	r2, #1
 8005d84:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005d86:	4b03      	ldr	r3, [pc, #12]	@ (8005d94 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d88:	681b      	ldr	r3, [r3, #0]
	}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	200002d0 	.word	0x200002d0

08005d98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005da2:	4b29      	ldr	r3, [pc, #164]	@ (8005e48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da8:	4b28      	ldr	r3, [pc, #160]	@ (8005e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fb88 	bl	80044c4 <uxListRemove>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005dba:	4b24      	ldr	r3, [pc, #144]	@ (8005e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	4b21      	ldr	r3, [pc, #132]	@ (8005e50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4013      	ands	r3, r2
 8005dce:	4a20      	ldr	r2, [pc, #128]	@ (8005e50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005dd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d10a      	bne.n	8005df0 <prvAddCurrentTaskToDelayedList+0x58>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	481a      	ldr	r0, [pc, #104]	@ (8005e54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005dea:	f7fe fb0e 	bl	800440a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005dee:	e026      	b.n	8005e3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4413      	add	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005df8:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d209      	bcs.n	8005e1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e08:	4b13      	ldr	r3, [pc, #76]	@ (8005e58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7fe fb1c 	bl	8004452 <vListInsert>
}
 8005e1a:	e010      	b.n	8005e3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7fe fb12 	bl	8004452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d202      	bcs.n	8005e3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e38:	4a09      	ldr	r2, [pc, #36]	@ (8005e60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6013      	str	r3, [r2, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	200003d4 	.word	0x200003d4
 8005e4c:	200002d0 	.word	0x200002d0
 8005e50:	200003d8 	.word	0x200003d8
 8005e54:	200003bc 	.word	0x200003bc
 8005e58:	2000038c 	.word	0x2000038c
 8005e5c:	20000388 	.word	0x20000388
 8005e60:	200003f0 	.word	0x200003f0

08005e64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3b04      	subs	r3, #4
 8005e74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f023 0201 	bic.w	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3b04      	subs	r3, #4
 8005e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e94:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec8 <pxPortInitialiseStack+0x64>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3b14      	subs	r3, #20
 8005e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3b04      	subs	r3, #4
 8005eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f06f 0202 	mvn.w	r2, #2
 8005eb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3b20      	subs	r3, #32
 8005eb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005eba:	68fb      	ldr	r3, [r7, #12]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	08005ecd 	.word	0x08005ecd

08005ecc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ed6:	4b13      	ldr	r3, [pc, #76]	@ (8005f24 <prvTaskExitError+0x58>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d00b      	beq.n	8005ef8 <prvTaskExitError+0x2c>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	60fb      	str	r3, [r7, #12]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <prvTaskExitError+0x28>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	60bb      	str	r3, [r7, #8]
}
 8005f0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f0c:	bf00      	nop
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0fc      	beq.n	8005f0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	2000000c 	.word	0x2000000c
	...

08005f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f30:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <pxCurrentTCBConst2>)
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	6808      	ldr	r0, [r1, #0]
 8005f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3a:	f380 8809 	msr	PSP, r0
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8811 	msr	BASEPRI, r0
 8005f4a:	4770      	bx	lr
 8005f4c:	f3af 8000 	nop.w

08005f50 <pxCurrentTCBConst2>:
 8005f50:	200002d0 	.word	0x200002d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop

08005f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f58:	4808      	ldr	r0, [pc, #32]	@ (8005f7c <prvPortStartFirstTask+0x24>)
 8005f5a:	6800      	ldr	r0, [r0, #0]
 8005f5c:	6800      	ldr	r0, [r0, #0]
 8005f5e:	f380 8808 	msr	MSP, r0
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f380 8814 	msr	CONTROL, r0
 8005f6a:	b662      	cpsie	i
 8005f6c:	b661      	cpsie	f
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	df00      	svc	0
 8005f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f7a:	bf00      	nop
 8005f7c:	e000ed08 	.word	0xe000ed08

08005f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f86:	4b47      	ldr	r3, [pc, #284]	@ (80060a4 <xPortStartScheduler+0x124>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a47      	ldr	r2, [pc, #284]	@ (80060a8 <xPortStartScheduler+0x128>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10b      	bne.n	8005fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80060a4 <xPortStartScheduler+0x124>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a3f      	ldr	r2, [pc, #252]	@ (80060ac <xPortStartScheduler+0x12c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10b      	bne.n	8005fca <xPortStartScheduler+0x4a>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	60fb      	str	r3, [r7, #12]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fca:	4b39      	ldr	r3, [pc, #228]	@ (80060b0 <xPortStartScheduler+0x130>)
 8005fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	22ff      	movs	r2, #255	@ 0xff
 8005fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	4b31      	ldr	r3, [pc, #196]	@ (80060b4 <xPortStartScheduler+0x134>)
 8005ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ff2:	4b31      	ldr	r3, [pc, #196]	@ (80060b8 <xPortStartScheduler+0x138>)
 8005ff4:	2207      	movs	r2, #7
 8005ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ff8:	e009      	b.n	800600e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80060b8 <xPortStartScheduler+0x138>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4a2d      	ldr	r2, [pc, #180]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	b2db      	uxtb	r3, r3
 800600c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006016:	2b80      	cmp	r3, #128	@ 0x80
 8006018:	d0ef      	beq.n	8005ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800601a:	4b27      	ldr	r3, [pc, #156]	@ (80060b8 <xPortStartScheduler+0x138>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f1c3 0307 	rsb	r3, r3, #7
 8006022:	2b04      	cmp	r3, #4
 8006024:	d00b      	beq.n	800603e <xPortStartScheduler+0xbe>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800603e:	4b1e      	ldr	r3, [pc, #120]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	4a1c      	ldr	r2, [pc, #112]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006048:	4b1b      	ldr	r3, [pc, #108]	@ (80060b8 <xPortStartScheduler+0x138>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006050:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <xPortStartScheduler+0x138>)
 8006052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800605c:	4b17      	ldr	r3, [pc, #92]	@ (80060bc <xPortStartScheduler+0x13c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a16      	ldr	r2, [pc, #88]	@ (80060bc <xPortStartScheduler+0x13c>)
 8006062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006068:	4b14      	ldr	r3, [pc, #80]	@ (80060bc <xPortStartScheduler+0x13c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <xPortStartScheduler+0x13c>)
 800606e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006074:	f000 f8da 	bl	800622c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006078:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <xPortStartScheduler+0x140>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800607e:	f000 f8f9 	bl	8006274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <xPortStartScheduler+0x144>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a0f      	ldr	r2, [pc, #60]	@ (80060c4 <xPortStartScheduler+0x144>)
 8006088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800608c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800608e:	f7ff ff63 	bl	8005f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006092:	f7ff fa7f 	bl	8005594 <vTaskSwitchContext>
	prvTaskExitError();
 8006096:	f7ff ff19 	bl	8005ecc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	e000ed00 	.word	0xe000ed00
 80060a8:	410fc271 	.word	0x410fc271
 80060ac:	410fc270 	.word	0x410fc270
 80060b0:	e000e400 	.word	0xe000e400
 80060b4:	200003fc 	.word	0x200003fc
 80060b8:	20000400 	.word	0x20000400
 80060bc:	e000ed20 	.word	0xe000ed20
 80060c0:	2000000c 	.word	0x2000000c
 80060c4:	e000ef34 	.word	0xe000ef34

080060c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060e2:	4b10      	ldr	r3, [pc, #64]	@ (8006124 <vPortEnterCritical+0x5c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006124 <vPortEnterCritical+0x5c>)
 80060ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <vPortEnterCritical+0x5c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d110      	bne.n	8006116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <vPortEnterCritical+0x60>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <vPortEnterCritical+0x4e>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	603b      	str	r3, [r7, #0]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <vPortEnterCritical+0x4a>
	}
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000000c 	.word	0x2000000c
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006132:	4b12      	ldr	r3, [pc, #72]	@ (800617c <vPortExitCritical+0x50>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <vPortExitCritical+0x26>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006152:	4b0a      	ldr	r3, [pc, #40]	@ (800617c <vPortExitCritical+0x50>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a08      	ldr	r2, [pc, #32]	@ (800617c <vPortExitCritical+0x50>)
 800615a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <vPortExitCritical+0x50>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <vPortExitCritical+0x44>
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	2000000c 	.word	0x2000000c

08006180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006180:	f3ef 8009 	mrs	r0, PSP
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4b15      	ldr	r3, [pc, #84]	@ (80061e0 <pxCurrentTCBConst>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f01e 0f10 	tst.w	lr, #16
 8006190:	bf08      	it	eq
 8006192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619a:	6010      	str	r0, [r2, #0]
 800619c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061a4:	f380 8811 	msr	BASEPRI, r0
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f7ff f9f0 	bl	8005594 <vTaskSwitchContext>
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f380 8811 	msr	BASEPRI, r0
 80061bc:	bc09      	pop	{r0, r3}
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	6808      	ldr	r0, [r1, #0]
 80061c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c6:	f01e 0f10 	tst.w	lr, #16
 80061ca:	bf08      	it	eq
 80061cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061d0:	f380 8809 	msr	PSP, r0
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst>:
 80061e0:	200002d0 	.word	0x200002d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	607b      	str	r3, [r7, #4]
}
 8006200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006202:	f7ff f90d 	bl	8005420 <xTaskIncrementTick>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800620c:	4b06      	ldr	r3, [pc, #24]	@ (8006228 <SysTick_Handler+0x40>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	f383 8811 	msr	BASEPRI, r3
}
 800621e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006230:	4b0b      	ldr	r3, [pc, #44]	@ (8006260 <vPortSetupTimerInterrupt+0x34>)
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006236:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <vPortSetupTimerInterrupt+0x38>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <vPortSetupTimerInterrupt+0x3c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <vPortSetupTimerInterrupt+0x40>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	099b      	lsrs	r3, r3, #6
 8006248:	4a09      	ldr	r2, [pc, #36]	@ (8006270 <vPortSetupTimerInterrupt+0x44>)
 800624a:	3b01      	subs	r3, #1
 800624c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800624e:	4b04      	ldr	r3, [pc, #16]	@ (8006260 <vPortSetupTimerInterrupt+0x34>)
 8006250:	2207      	movs	r2, #7
 8006252:	601a      	str	r2, [r3, #0]
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	e000e010 	.word	0xe000e010
 8006264:	e000e018 	.word	0xe000e018
 8006268:	20000000 	.word	0x20000000
 800626c:	10624dd3 	.word	0x10624dd3
 8006270:	e000e014 	.word	0xe000e014

08006274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006284 <vPortEnableVFP+0x10>
 8006278:	6801      	ldr	r1, [r0, #0]
 800627a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800627e:	6001      	str	r1, [r0, #0]
 8006280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006282:	bf00      	nop
 8006284:	e000ed88 	.word	0xe000ed88

08006288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800628e:	f3ef 8305 	mrs	r3, IPSR
 8006292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b0f      	cmp	r3, #15
 8006298:	d915      	bls.n	80062c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800629a:	4a18      	ldr	r2, [pc, #96]	@ (80062fc <vPortValidateInterruptPriority+0x74>)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062a4:	4b16      	ldr	r3, [pc, #88]	@ (8006300 <vPortValidateInterruptPriority+0x78>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	7afa      	ldrb	r2, [r7, #11]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d20b      	bcs.n	80062c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006304 <vPortValidateInterruptPriority+0x7c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006308 <vPortValidateInterruptPriority+0x80>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d90b      	bls.n	80062ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	603b      	str	r3, [r7, #0]
}
 80062e8:	bf00      	nop
 80062ea:	bf00      	nop
 80062ec:	e7fd      	b.n	80062ea <vPortValidateInterruptPriority+0x62>
	}
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000e3f0 	.word	0xe000e3f0
 8006300:	200003fc 	.word	0x200003fc
 8006304:	e000ed0c 	.word	0xe000ed0c
 8006308:	20000400 	.word	0x20000400

0800630c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	@ 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006314:	2300      	movs	r3, #0
 8006316:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006318:	f7fe ffd6 	bl	80052c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800631c:	4b5c      	ldr	r3, [pc, #368]	@ (8006490 <pvPortMalloc+0x184>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006324:	f000 f924 	bl	8006570 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006328:	4b5a      	ldr	r3, [pc, #360]	@ (8006494 <pvPortMalloc+0x188>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4013      	ands	r3, r2
 8006330:	2b00      	cmp	r3, #0
 8006332:	f040 8095 	bne.w	8006460 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01e      	beq.n	800637a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800633c:	2208      	movs	r2, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b00      	cmp	r3, #0
 800634c:	d015      	beq.n	800637a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f023 0307 	bic.w	r3, r3, #7
 8006354:	3308      	adds	r3, #8
 8006356:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <pvPortMalloc+0x6e>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	617b      	str	r3, [r7, #20]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d06f      	beq.n	8006460 <pvPortMalloc+0x154>
 8006380:	4b45      	ldr	r3, [pc, #276]	@ (8006498 <pvPortMalloc+0x18c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	429a      	cmp	r2, r3
 8006388:	d86a      	bhi.n	8006460 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800638a:	4b44      	ldr	r3, [pc, #272]	@ (800649c <pvPortMalloc+0x190>)
 800638c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800638e:	4b43      	ldr	r3, [pc, #268]	@ (800649c <pvPortMalloc+0x190>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006394:	e004      	b.n	80063a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d903      	bls.n	80063b2 <pvPortMalloc+0xa6>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f1      	bne.n	8006396 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063b2:	4b37      	ldr	r3, [pc, #220]	@ (8006490 <pvPortMalloc+0x184>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d051      	beq.n	8006460 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2208      	movs	r2, #8
 80063c2:	4413      	add	r3, r2
 80063c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	2308      	movs	r3, #8
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	429a      	cmp	r2, r3
 80063dc:	d920      	bls.n	8006420 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4413      	add	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <pvPortMalloc+0xfc>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	613b      	str	r3, [r7, #16]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800641a:	69b8      	ldr	r0, [r7, #24]
 800641c:	f000 f90a 	bl	8006634 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006420:	4b1d      	ldr	r3, [pc, #116]	@ (8006498 <pvPortMalloc+0x18c>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	4a1b      	ldr	r2, [pc, #108]	@ (8006498 <pvPortMalloc+0x18c>)
 800642c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800642e:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <pvPortMalloc+0x18c>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b1b      	ldr	r3, [pc, #108]	@ (80064a0 <pvPortMalloc+0x194>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d203      	bcs.n	8006442 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800643a:	4b17      	ldr	r3, [pc, #92]	@ (8006498 <pvPortMalloc+0x18c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a18      	ldr	r2, [pc, #96]	@ (80064a0 <pvPortMalloc+0x194>)
 8006440:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	4b13      	ldr	r3, [pc, #76]	@ (8006494 <pvPortMalloc+0x188>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	431a      	orrs	r2, r3
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006456:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <pvPortMalloc+0x198>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3301      	adds	r3, #1
 800645c:	4a11      	ldr	r2, [pc, #68]	@ (80064a4 <pvPortMalloc+0x198>)
 800645e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006460:	f7fe ff40 	bl	80052e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <pvPortMalloc+0x17a>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	60fb      	str	r3, [r7, #12]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <pvPortMalloc+0x176>
	return pvReturn;
 8006486:	69fb      	ldr	r3, [r7, #28]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	@ 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	2000400c 	.word	0x2000400c
 8006494:	20004020 	.word	0x20004020
 8006498:	20004010 	.word	0x20004010
 800649c:	20004004 	.word	0x20004004
 80064a0:	20004014 	.word	0x20004014
 80064a4:	20004018 	.word	0x20004018

080064a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d04f      	beq.n	800655a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064ba:	2308      	movs	r3, #8
 80064bc:	425b      	negs	r3, r3
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4b25      	ldr	r3, [pc, #148]	@ (8006564 <vPortFree+0xbc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10b      	bne.n	80064ee <vPortFree+0x46>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60fb      	str	r3, [r7, #12]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <vPortFree+0x66>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60bb      	str	r3, [r7, #8]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4b14      	ldr	r3, [pc, #80]	@ (8006564 <vPortFree+0xbc>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01e      	beq.n	800655a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11a      	bne.n	800655a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	4b0e      	ldr	r3, [pc, #56]	@ (8006564 <vPortFree+0xbc>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	43db      	mvns	r3, r3
 800652e:	401a      	ands	r2, r3
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006534:	f7fe fec8 	bl	80052c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <vPortFree+0xc0>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4413      	add	r3, r2
 8006542:	4a09      	ldr	r2, [pc, #36]	@ (8006568 <vPortFree+0xc0>)
 8006544:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006546:	6938      	ldr	r0, [r7, #16]
 8006548:	f000 f874 	bl	8006634 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800654c:	4b07      	ldr	r3, [pc, #28]	@ (800656c <vPortFree+0xc4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	4a06      	ldr	r2, [pc, #24]	@ (800656c <vPortFree+0xc4>)
 8006554:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006556:	f7fe fec5 	bl	80052e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800655a:	bf00      	nop
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20004020 	.word	0x20004020
 8006568:	20004010 	.word	0x20004010
 800656c:	2000401c 	.word	0x2000401c

08006570 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006576:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800657a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800657c:	4b27      	ldr	r3, [pc, #156]	@ (800661c <prvHeapInit+0xac>)
 800657e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3307      	adds	r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0307 	bic.w	r3, r3, #7
 8006596:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	4a1f      	ldr	r2, [pc, #124]	@ (800661c <prvHeapInit+0xac>)
 80065a0:	4413      	add	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <prvHeapInit+0xb0>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006620 <prvHeapInit+0xb0>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4413      	add	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065bc:	2208      	movs	r2, #8
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a15      	ldr	r2, [pc, #84]	@ (8006624 <prvHeapInit+0xb4>)
 80065d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065d2:	4b14      	ldr	r3, [pc, #80]	@ (8006624 <prvHeapInit+0xb4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065da:	4b12      	ldr	r3, [pc, #72]	@ (8006624 <prvHeapInit+0xb4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	1ad2      	subs	r2, r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006624 <prvHeapInit+0xb4>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006628 <prvHeapInit+0xb8>)
 80065fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4a09      	ldr	r2, [pc, #36]	@ (800662c <prvHeapInit+0xbc>)
 8006606:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006608:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <prvHeapInit+0xc0>)
 800660a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800660e:	601a      	str	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	20000404 	.word	0x20000404
 8006620:	20004004 	.word	0x20004004
 8006624:	2000400c 	.word	0x2000400c
 8006628:	20004014 	.word	0x20004014
 800662c:	20004010 	.word	0x20004010
 8006630:	20004020 	.word	0x20004020

08006634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800663c:	4b28      	ldr	r3, [pc, #160]	@ (80066e0 <prvInsertBlockIntoFreeList+0xac>)
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e002      	b.n	8006648 <prvInsertBlockIntoFreeList+0x14>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	d8f7      	bhi.n	8006642 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	4413      	add	r3, r2
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	429a      	cmp	r2, r3
 8006662:	d108      	bne.n	8006676 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	441a      	add	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	441a      	add	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d118      	bne.n	80066bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b15      	ldr	r3, [pc, #84]	@ (80066e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d00d      	beq.n	80066b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e008      	b.n	80066c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066b2:	4b0c      	ldr	r3, [pc, #48]	@ (80066e4 <prvInsertBlockIntoFreeList+0xb0>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e003      	b.n	80066c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d002      	beq.n	80066d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20004004 	.word	0x20004004
 80066e4:	2000400c 	.word	0x2000400c

080066e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fd fd2c 	bl	8004154 <USBH_LL_IncTimer>
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006712:	4618      	mov	r0, r3
 8006714:	f7fd fd70 	bl	80041f8 <USBH_LL_Connect>
}
 8006718:	bf00      	nop
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800672e:	4618      	mov	r0, r3
 8006730:	f7fd fd85 	bl	800423e <USBH_LL_Disconnect>
}
 8006734:	bf00      	nop
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
 8006748:	4613      	mov	r3, r2
 800674a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd fda5 	bl	80042a2 <USBH_LL_NotifyURBChange>
#endif
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800676e:	4618      	mov	r0, r3
 8006770:	f7fd fd1a 	bl	80041a8 <USBH_LL_PortEnabled>
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd fd26 	bl	80041dc <USBH_LL_PortDisabled>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fa fdc5 	bl	800133e <HAL_HCD_Stop>
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f808 	bl	80067d0 <USBH_Get_USB_Status>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d817      	bhi.n	8006814 <USBH_Get_USB_Status+0x44>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <USBH_Get_USB_Status+0x1c>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	08006803 	.word	0x08006803
 80067f4:	08006809 	.word	0x08006809
 80067f8:	0800680f 	.word	0x0800680f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006800:	e00b      	b.n	800681a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	73fb      	strb	r3, [r7, #15]
    break;
 8006806:	e008      	b.n	800681a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006808:	2301      	movs	r3, #1
 800680a:	73fb      	strb	r3, [r7, #15]
    break;
 800680c:	e005      	b.n	800681a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800680e:	2302      	movs	r3, #2
 8006810:	73fb      	strb	r3, [r7, #15]
    break;
 8006812:	e002      	b.n	800681a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006814:	2302      	movs	r3, #2
 8006816:	73fb      	strb	r3, [r7, #15]
    break;
 8006818:	bf00      	nop
  }
  return usb_status;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <memset>:
 8006828:	4402      	add	r2, r0
 800682a:	4603      	mov	r3, r0
 800682c:	4293      	cmp	r3, r2
 800682e:	d100      	bne.n	8006832 <memset+0xa>
 8006830:	4770      	bx	lr
 8006832:	f803 1b01 	strb.w	r1, [r3], #1
 8006836:	e7f9      	b.n	800682c <memset+0x4>

08006838 <__libc_init_array>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4d0d      	ldr	r5, [pc, #52]	@ (8006870 <__libc_init_array+0x38>)
 800683c:	4c0d      	ldr	r4, [pc, #52]	@ (8006874 <__libc_init_array+0x3c>)
 800683e:	1b64      	subs	r4, r4, r5
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	2600      	movs	r6, #0
 8006844:	42a6      	cmp	r6, r4
 8006846:	d109      	bne.n	800685c <__libc_init_array+0x24>
 8006848:	4d0b      	ldr	r5, [pc, #44]	@ (8006878 <__libc_init_array+0x40>)
 800684a:	4c0c      	ldr	r4, [pc, #48]	@ (800687c <__libc_init_array+0x44>)
 800684c:	f000 f826 	bl	800689c <_init>
 8006850:	1b64      	subs	r4, r4, r5
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	2600      	movs	r6, #0
 8006856:	42a6      	cmp	r6, r4
 8006858:	d105      	bne.n	8006866 <__libc_init_array+0x2e>
 800685a:	bd70      	pop	{r4, r5, r6, pc}
 800685c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006860:	4798      	blx	r3
 8006862:	3601      	adds	r6, #1
 8006864:	e7ee      	b.n	8006844 <__libc_init_array+0xc>
 8006866:	f855 3b04 	ldr.w	r3, [r5], #4
 800686a:	4798      	blx	r3
 800686c:	3601      	adds	r6, #1
 800686e:	e7f2      	b.n	8006856 <__libc_init_array+0x1e>
 8006870:	080068f4 	.word	0x080068f4
 8006874:	080068f4 	.word	0x080068f4
 8006878:	080068f4 	.word	0x080068f4
 800687c:	080068f8 	.word	0x080068f8

08006880 <memcpy>:
 8006880:	440a      	add	r2, r1
 8006882:	4291      	cmp	r1, r2
 8006884:	f100 33ff 	add.w	r3, r0, #4294967295
 8006888:	d100      	bne.n	800688c <memcpy+0xc>
 800688a:	4770      	bx	lr
 800688c:	b510      	push	{r4, lr}
 800688e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006896:	4291      	cmp	r1, r2
 8006898:	d1f9      	bne.n	800688e <memcpy+0xe>
 800689a:	bd10      	pop	{r4, pc}

0800689c <_init>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	bf00      	nop
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr

080068a8 <_fini>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	bf00      	nop
 80068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ae:	bc08      	pop	{r3}
 80068b0:	469e      	mov	lr, r3
 80068b2:	4770      	bx	lr
